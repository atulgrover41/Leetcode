[{"title":"Two Sum","titleSlug":"two-sum","status":"ac","content":"<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\r\n\r\n<p>You may assume that each input would have <strong><em>exactly</em></strong> one solution, and you may not use the <em>same</em> element twice.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven nums = [2, 7, 11, 15], target = 9,\r\n\r\nBecause nums[<strong>0</strong>] + nums[<strong>1</strong>] = 2 + 7 = 9,\r\nreturn [<strong>0</strong>, <strong>1</strong>].\r\n</pre>\r\n","code":"class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        for i in enumerate(nums):\n            newlist=copy.copy(nums)\n            newlist.pop(i[0])\n            remain = target - i[1]\n            for j in enumerate(newlist):\n                if j[1] == remain:\n                    if j[0] >= i[0]:\n                        return i[0],j[0]+1\n                    else:\n                        return i[0],j[0]\n                    ","lang":"python3"},{"title":"Add Two Numbers","titleSlug":"add-two-numbers","status":"ac","content":"<p>You are given two <b>non-empty</b> linked lists representing two non-negative integers. The digits are stored in <b>reverse order</b> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\r\n\r\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\r\n<b>Output:</b> 7 -&gt; 0 -&gt; 8\r\n<b>Explanation:</b> 342 + 465 = 807.\r\n</pre>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        number1=\"\"\n        number2=\"\"\n        while l1!=None:\n            number1+=str(l1.val)\n            l1=l1.next\n        while l2!=None:\n            number2+=str(l2.val)\n            l2=l2.next\n        number1=number1[::-1]\n        number2=number2[::-1]\n        number3=int(number2)+int(number1)\n        number3=str(number3)[::-1]\n        head=None\n        Tail=None\n        for i in number3:\n            x=ListNode(int(i))\n            if head == None: \n                head=x\n                Tail=x\n            else:\n                Tail.next=x\n                Tail=x\n        return head","lang":"python3"},{"title":"Reverse Integer","titleSlug":"reverse-integer","status":"ac","content":"<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 123\r\n<strong>Output:</strong> 321\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -123\r\n<strong>Output:</strong> -321\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 120\r\n<strong>Output:</strong> 21\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [&minus;2<sup>31</sup>,&nbsp; 2<sup>31&nbsp;</sup>&minus; 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\r\n","code":"class Solution:\n    def reverse(self, x: int) -> int:\n        i=0\n        print(pow(2,31))\n        if abs(x) > (pow(2,31)):\n            return 0\n        l=[]\n        neg=0\n        if x < 0:\n            neg=True\n            x=abs(x)\n        y=x/10\n        zero=0\n        while(x > 0):\n            y=int(x%10)\n            x=int(x/10)\n            if y != 0 or zero != 0 :\n                l.append(y)\n                zero+=1\n        m=1\n        num=0\n        for i in l:\n            num = num+ i*pow(10,(len(l)-m))\n            m=m+1\n        if num > pow(2,31):\n            return 0\n        if neg is True:\n            return -num\n        return num","lang":"python3"},{"title":"Palindrome Number","titleSlug":"palindrome-number","status":"ac","content":"<p>Determine whether an integer is a palindrome. An integer&nbsp;is&nbsp;a&nbsp;palindrome when it&nbsp;reads the same backward as forward.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 121\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -121\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 10\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> Reads 01 from right to left. Therefore it is not a palindrome.\r\n</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Coud you solve&nbsp;it without converting the integer to a string?</p>\r\n","code":"class Solution:\n    def isPalindrome(self, x: int) -> bool:\n        if x < 0:\n            return False\n        m=x\n        l=[]\n        while m > 0:\n            l.append(m %10)\n            m=int(m/10)\n        newlist=copy.copy(l)\n        newlist.reverse()\n        for i,j in zip(l,newlist):\n            if i != j:\n                return False\n        return True\n            ","lang":"python3"},{"title":"Remove Nth Node From End of List","titleSlug":"remove-nth-node-from-end-of-list","status":"ac","content":"<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\nGiven linked list: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, and <strong><em>n</em> = 2</strong>.\r\n\r\nAfter removing the second node from the end, the linked list becomes <strong>1-&gt;2-&gt;3-&gt;5</strong>.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Given <em>n</em> will always be valid.</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Could you do this in one pass?</p>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\nclass Solution:\n    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n        length=1\n        node=head\n        while node.next!=None:\n            length+=1\n            node =node.next\n        node=head\n        if length ==1:\n            return None\n        if length == n:\n            return head.next\n        while length -n !=1:\n            node=node.next\n            length -=1\n        node.next= node.next.next\n        return head\n        ","lang":"python3"},{"title":"Merge k Sorted Lists","titleSlug":"merge-k-sorted-lists","status":"ac","content":"<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\n[\r\n&nbsp; 1-&gt;4-&gt;5,\r\n&nbsp; 1-&gt;3-&gt;4,\r\n&nbsp; 2-&gt;6\r\n]\r\n<strong>Output:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\r\n</pre>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\n\nclass Solution:\n    def mergeKLists(self, lists: List[ListNode]) -> ListNode:\n        if len(lists) is 0:\n            return None\n        #print(len(lists))\n        h=[]\n        for i in lists:\n            while i!=None:\n                heapq.heappush(h, i.val)\n                i=i.next\n        head= None\n        while len(h)>0:\n            if head ==None:\n                i=heapq.heappop(h)\n                newnode=ListNode(i)\n                head=newnode\n                root=newnode\n            else:\n                i=heapq.heappop(h)\n                newnode=ListNode(i)\n                root.next=newnode\n                root=newnode\n        return head","lang":"python3"},{"title":"Search in Rotated Sorted Array","titleSlug":"search-in-rotated-sorted-array","status":"ac","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p>\r\n\r\n<p>Your algorithm&#39;s runtime complexity must be in the order of&nbsp;<em>O</em>(log&nbsp;<em>n</em>).</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 0\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [<code>4,5,6,7,0,1,2]</code>, target = 3\r\n<strong>Output:</strong> -1</pre>\r\n","code":"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        low=0\n        high= len(nums)-1\n        \n        \n        while low<=high:\n            mid = (low +high)//2\n            if nums[mid] == target:\n                return mid\n            if nums[low] <= nums[mid] :\n                if nums[low]<=target<=nums[mid]:\n                    high = mid -1\n                else:\n                    low=mid+1\n            else:\n                if nums[mid]<=target<=nums[high]:\n                    low=mid+1\n                else:\n                    high = mid -1\n        return -1\n                    \n            \n            ","lang":"python3"},{"title":"Search Insert Position","titleSlug":"search-insert-position","status":"ac","content":"<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\r\n\r\n<p>You may assume no duplicates in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 5\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 2\r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 7\r\n<strong>Output:</strong> 4\r\n</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,3,5,6], 0\r\n<strong>Output:</strong> 0\r\n</pre>\r\n","code":"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        i=0\n        n=math.floor(len(nums)/2)\n       \n        if nums[n] <= target:\n            i=n\n       \n        while i < len(nums) and nums[i]<= target:\n            if nums[i] == target:\n                return i\n            i=i+1\n        return i    ","lang":"python3"},{"title":"First Missing Positive","titleSlug":"first-missing-positive","status":"ac","content":"<p>Given an unsorted integer array, find the smallest missing&nbsp;positive integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\nInput: [1,2,0]\r\nOutput: 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\nInput: [3,4,-1,1]\r\nOutput: 2\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\nInput: [7,8,9,11,12]\r\nOutput: 1\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p>\r\n","code":"class Solution:\n    def firstMissingPositive(self, nums: List[int]) -> int:\n        \n        if len(nums) <= 0:\n            return 1\n        m=max(nums)\n        if m< 0:\n            m=1\n        nums=set(nums)\n        for i in range(1,m+2):\n            if i not in nums:\n                return i","lang":"python3"},{"title":"Multiply Strings","titleSlug":"multiply-strings","status":"ac","content":"<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;2&quot;, num2 = &quot;3&quot;\r\n<strong>Output:</strong> &quot;6&quot;</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> num1 = &quot;123&quot;, num2 = &quot;456&quot;\r\n<strong>Output:</strong> &quot;56088&quot;\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code> contain&nbsp;only digits <code>0-9</code>.</li>\r\n\t<li>Both <code>num1</code> and <code>num2</code>&nbsp;do not contain any leading zero, except the number 0 itself.</li>\r\n\t<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>\r\n</ol>\r\n","code":"class Solution:\n    def multiply(self, num1: str, num2: str) -> str:\n        number1=0\n        x=1\n        number2=0    \n        for i in num1[::-1]:\n            c= ord(i)-48\n            number1= number1+c*x\n            x=x*10\n        x=1\n        for j in num2[::-1]:\n            d=ord(j)-48\n            number2=number2+d*x\n            x=x*10\n        number3 = number1*number2\n        return str(number3)","lang":"python3"},{"title":"Sqrt(x)","titleSlug":"sqrtx","status":"ac","content":"<p>Implement <code>int sqrt(int x)</code>.</p>\r\n\r\n<p>Compute and return the square root of <em>x</em>, where&nbsp;<em>x</em>&nbsp;is guaranteed to be a non-negative integer.</p>\r\n\r\n<p>Since the return type&nbsp;is an integer, the decimal digits are truncated and only the integer part of the result&nbsp;is returned.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4\r\n<strong>Output:</strong> 2\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 8\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> The square root of 8 is 2.82842..., and since \r\n&nbsp;            the decimal part is truncated, 2 is returned.\r\n</pre>\r\n","code":"class Solution:\n    def mySqrt(self, x: int) -> int:\n        if x == 0:\n            return 0\n        for i in range(x+1):\n            if i*i == x:\n                return i\n            if i*i > x:\n                return i-1","lang":"python3"},{"title":"Climbing Stairs","titleSlug":"climbing-stairs","status":"ac","content":"<p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p>\r\n\r\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\r\n\r\n<p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2\r\n<strong>Output:</strong> 2\r\n<strong>Explanation:</strong> There are two ways to climb to the top.\r\n1. 1 step + 1 step\r\n2. 2 steps\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 3\r\n<strong>Output:</strong> 3\r\n<strong>Explanation:</strong> There are three ways to climb to the top.\r\n1. 1 step + 1 step + 1 step\r\n2. 1 step + 2 steps\r\n3. 2 steps + 1 step\r\n</pre>\r\n","code":"class Solution:\n    def __init__(self):\n        self.dic = {1:1,2:2}\n    def climbStairs(self, n: int) -> int:\n        if n not in self.dic:\n            self.dic[n]= self.climbStairs(n-1)+self.climbStairs(n-2)\n        return self.dic[n]","lang":"python3"},{"title":"Sort Colors","titleSlug":"sort-colors","status":"ac","content":"<p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a>&nbsp;</strong>so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>\r\n\r\n<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;You are not suppose to use the library&#39;s sort function for this problem.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,0,2,1,1,0]\r\n<strong>Output:</strong> [0,0,1,1,2,2]</pre>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<ul>\r\n\t<li>A rather straight forward solution is a two-pass algorithm using counting sort.<br />\r\n\tFirst, iterate the array counting number of 0&#39;s, 1&#39;s, and 2&#39;s, then overwrite array with total number of 0&#39;s, then 1&#39;s and followed by 2&#39;s.</li>\r\n\t<li>Could you come up with a&nbsp;one-pass algorithm using only constant space?</li>\r\n</ul>\r\n","code":"class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        l=[0,0,0]\n        for i in nums:\n            if i == 0:\n                l[0]+=1\n            elif i == 1:\n                l[1]+=1\n            else:\n                l[2]+=1\n        x=0\n        del nums[:]\n        while l[0]:\n            nums.append(0)\n            l[0]-=1\n        while l[1]:\n            nums.append(1)\n            l[1]-=1\n        while l[2]:\n            nums.append(2)\n            l[2]-=1\n            ","lang":"python"},{"title":"Merge Sorted Array","titleSlug":"merge-sorted-array","status":"ac","content":"<p>Given two sorted integer arrays <em>nums1</em> and <em>nums2</em>, merge <em>nums2</em> into <em>nums1</em> as one sorted array.</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of elements initialized in <em>nums1</em> and <em>nums2</em> are <em>m</em> and <em>n</em> respectively.</li>\r\n\t<li>You may assume that <em>nums1</em> has enough space (size that is greater or equal to <em>m</em> + <em>n</em>) to hold additional elements from <em>nums2</em>.</li>\r\n</ul>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>\r\nnums1 = [1,2,3,0,0,0], m = 3\r\nnums2 = [2,5,6],       n = 3\r\n\r\n<strong>Output:</strong>&nbsp;[1,2,2,3,5,6]\r\n</pre>\r\n","code":"class Solution:\n    def merge(self, nums1, m, nums2, n):\n        while m > 0 and n > 0:\n            if nums1[m-1] >= nums2[n-1]:\n                nums1[m+n-1] = nums1[m-1]\n                m -= 1\n            else:\n                nums1[m+n-1] = nums2[n-1]\n                n -= 1\n        if n > 0:\n            nums1[:n] = nums2[:n]","lang":"python3"},{"title":"Same Tree","titleSlug":"same-tree","status":"ac","content":"<p>Given two binary trees, write a function to check if they are the same or not.</p>\r\n\r\n<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          / \\       / \\\r\n         2   3     2   3\r\n\r\n        [1,2,3],   [1,2,3]\r\n\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          /           \\\r\n         2             2\r\n\r\n        [1,2],     [1,null,2]\r\n\r\n<strong>Output:</strong> false\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>     1         1\r\n          / \\       / \\\r\n         2   1     1   2\r\n\r\n        [1,2,1],   [1,1,2]\r\n\r\n<strong>Output:</strong> false\r\n</pre>\r\n","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:\n        def bfs(root):\n            if not root:\n                return []\n\n            node=[root]\n            value=[root.val]\n            while node:\n                currentnode =node.pop(0)\n                \n                print(currentnode.val)\n                if currentnode.left:\n                    node.append(currentnode.left)\n                    value.append(currentnode.left.val)\n                else:\n                    value.append(None)\n                if currentnode.right:\n                    node.append(currentnode.right)\n                    value.append(currentnode.right.val)\n                else:\n                    value.append(None)\n            return value\n        v1= bfs(p)\n        v2= bfs(q)\n        #print(v1,v2)\n        return True if v1==v2 else False","lang":"python3"},{"title":"Maximum Depth of Binary Tree","titleSlug":"maximum-depth-of-binary-tree","status":"ac","content":"<p>Given a binary tree, find its maximum depth.</p>\r\n\r\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;A leaf is a node with no children.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p>Given binary tree <code>[3,9,20,null,null,15,7]</code>,</p>\r\n\r\n<pre>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7</pre>\r\n\r\n<p>return its depth = 3.</p>\r\n","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def maxDepth(self, root: TreeNode) -> int:\n        ans = 0\n        if not root:\n            return 0\n        DFS = [] # stack\n        DFS.append((root,1))\n        while DFS:\n            root, depth = DFS.pop()\n            if depth > ans:\n                ans = depth\n            if root.left:\n                DFS.append((root.left, depth + 1))\n            if root.right:\n                DFS.append((root.right, depth + 1))\n        return ans\n        ","lang":"python3"},{"title":"Pascal's Triangle","titleSlug":"pascals-triangle","status":"ac","content":"<p>Given a non-negative integer&nbsp;<em>numRows</em>, generate the first <em>numRows</em> of Pascal&#39;s triangle.</p>\r\n\r\n<p><img alt=\"\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" style=\"height:240px; width:260px\" /><br />\r\n<small>In Pascal&#39;s triangle, each number is the sum of the two numbers directly above it.</small></p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 5\r\n<strong>Output:</strong>\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n</pre>\r\n","code":"class Solution:\n    def generate(self, numRows: int) -> List[List[int]]:\n        triangle =[]\n        \n        for row_num in range(numRows):\n            row = [None for _ in range(row_num +1)]\n            row[0], row[-1] = 1, 1\n            print(row)\n            for j in range(1, len(row)-1):\n                row[j]= triangle[row_num-1][j-1] + triangle[row_num-1][j]\n            triangle.append(row)\n        return triangle","lang":"python3"},{"title":"Valid Palindrome","titleSlug":"valid-palindrome","status":"ac","content":"<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>\r\n\r\n<p><strong>Note:</strong>&nbsp;For the purpose of this problem, we define empty string as valid palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;A man, a plan, a canal: Panama&quot;\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> &quot;race a car&quot;\r\n<strong>Output:</strong> false\r\n</pre>\r\n","code":"class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        if len(s) is 0:\n            return True\n        s=s.lower()\n        news=\"\"\n        for j in s:\n            if j.isalnum():\n                news+=j\n\n        for i, j in zip(news,news[::-1]):\n            print(i,j)\n            if i != j:\n                return False\n        return True","lang":"python3"},{"title":"Clone Graph","titleSlug":"clone-graph","status":"ac","content":"<p>Given&nbsp;a reference of a node in a&nbsp;<strong><a href=\"https://en.wikipedia.org/wiki/Connectivity_(graph_theory)#Connected_graph\" target=\"_blank\">connected</a></strong>&nbsp;undirected graph, return a <a href=\"https://en.wikipedia.org/wiki/Object_copying#Deep_copy\" target=\"_blank\"><strong>deep copy</strong></a> (clone) of the graph. Each node in the graph contains a val (<code>int</code>) and a list (<code>List[Node]</code>) of its neighbors.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/02/19/113_sample.png\" style=\"width: 200px; height: 149px;\" /></p>\r\n\r\n<pre>\r\n<strong>Input:\r\n</strong>{&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}\r\n\r\n<strong>Explanation:</strong>\r\nNode 1&#39;s value is 1, and it has two neighbors: Node 2 and 4.\r\nNode 2&#39;s value is 2, and it has two neighbors: Node 1 and 3.\r\nNode 3&#39;s value is 3, and it has two neighbors: Node 2 and 4.\r\nNode 4&#39;s value is 4, and it has two neighbors: Node 1 and 3.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes will be between 1 and 100.</li>\r\n\t<li>The undirected&nbsp;graph is a <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Simple_graph\" target=\"_blank\">simple graph</a>,&nbsp;which means no repeated edges and no self-loops in the graph.</li>\r\n\t<li>Since the graph is undirected, if node <em>p</em>&nbsp;has node <em>q</em>&nbsp;as&nbsp;neighbor, then node <em>q</em>&nbsp;must have node <em>p</em>&nbsp;as neighbor too.</li>\r\n\t<li>You must return the <strong>copy of the given node</strong> as a reference to the cloned graph.</li>\r\n</ol>\r\n","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val, neighbors):\n        self.val = val\n        self.neighbors = neighbors\n\"\"\"\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n\t    copies = {}\n\n\t    def createCopy(node, copies):\n\t\t\t# Create new copy of node but with no neighbors\n\t\t    newcopy = Node(node.val,None)\n\t\t    copies[node] = newcopy # dictionary holding key = old node and value = corresponding new node\n\t\t    nbors = []\n\n\t\t\t# now we want to check if all the neighbors are new nodes or not and if not, we create them and add to this neighbors list.\n\t\t    if node.neighbors:\n\t\t\t    for item in node.neighbors:\n\t\t\t\t    if item in copies: # This means a new node for this old node already exists.\n\t\t\t\t\t    nbors.append(copies[item]) # append the new node.\n\t\t\t\t    else: # create a new node for this neighbor node recursively.\n\t\t\t\t\t    nbors.append(createCopy(item, copies) )\n\n\t\t\t# replace the old neighbors with deep copies of the neighbor.\n\t\t    newcopy.neighbors = nbors\n\n\t\t    return newcopy\n\n\t    return createCopy(node, copies)\n        ","lang":"python3"},{"title":"Linked List Cycle","titleSlug":"linked-list-cycle","status":"ac","content":"<p>Given a linked list, determine if it has a cycle in it.</p>\r\n\r\n<p>To represent a cycle in the given linked list, we use an integer <code>pos</code> which represents the position (0-indexed)&nbsp;in the linked list where tail connects to. If <code>pos</code> is <code>-1</code>, then there is no cycle in the linked list.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[3,2,0,-4]</span>, pos = <span id=\"example-input-1-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the second node.</span>\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png\" style=\"width: 300px; height: 97px; margin-top: 8px; margin-bottom: 8px;\" /></span></p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[1,2]</span>, pos = <span id=\"example-input-1-2\">0</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true\r\n<strong>Explanation:</strong> There is a cycle in the linked list, where tail connects to the first node.</span>\r\n</pre>\r\n</div>\r\n\r\n<div>\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png\" style=\"width: 141px; height: 74px;\" /></span></p>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>head = <span id=\"example-input-1-1\">[1]</span>, pos = <span id=\"example-input-1-2\">-1</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">false\r\n<strong>Explanation:</strong> There is no cycle in the linked list.</span>\r\n</pre>\r\n</div>\r\n\r\n<p><span><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png\" style=\"width: 45px; height: 45px;\" /></span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Follow up:</strong></p>\r\n\r\n<p>Can you solve it using <em>O(1)</em> (i.e. constant) memory?</p>\r\n","code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def hasCycle(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        nodes=set()\n        while head!=None:\n            if head.next not in nodes:\n                nodes.add(head.next)\n                head=head.next\n            else:\n                return True\n        return False","lang":"python"},{"title":"Sort List","titleSlug":"sort-list","status":"ac","content":"<p>Sort a linked list in <em>O</em>(<em>n</em> log <em>n</em>) time using constant space complexity.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 4-&gt;2-&gt;1-&gt;3\r\n<strong>Output:</strong> 1-&gt;2-&gt;3-&gt;4\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> -1-&gt;5-&gt;3-&gt;4-&gt;0\r\n<strong>Output:</strong> -1-&gt;0-&gt;3-&gt;4-&gt;5</pre>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def sortList(self, head: ListNode) -> ListNode:\n        new_node=head\n        l=[]\n        while new_node:\n            l.append(new_node.val)\n            new_node=new_node.next\n        l=sorted(l)\n        new_node=head\n        while new_node:\n            new_node.val=l.pop(0)\n            new_node=new_node.next\n        return head","lang":"python3"},{"title":"Find Minimum in Rotated Sorted Array","titleSlug":"find-minimum-in-rotated-sorted-array","status":"ac","content":"<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\r\n\r\n<p>(i.e., &nbsp;<code>[0,1,2,4,5,6,7]</code>&nbsp;might become &nbsp;<code>[4,5,6,7,0,1,2]</code>).</p>\r\n\r\n<p>Find the minimum element.</p>\r\n\r\n<p>You may assume no duplicate exists in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,4,5,1,2] \r\n<strong>Output:</strong> 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [4,5,6,7,0,1,2]\r\n<strong>Output:</strong> 0\r\n</pre>\r\n","code":"class Solution:\n    def findMin(self, nums: List[int]) -> int:\n        length=len(nums)\n        if length==1:\n            return 1\n        minimum=nums[0]\n        for i in range(1,length):\n            if minimum > nums[i]:\n                minimum=nums[i]\n            if nums[i] < nums[i-1]:\n                return nums[i]\n        \n        return minimum","lang":"python3"},{"title":"Majority Element","titleSlug":"majority-element","status":"ac","content":"<p>Given an array of size <i>n</i>, find the majority element. The majority element is the element that appears <b>more than</b> <code>&lfloor; n/2 &rfloor;</code> times.</p>\r\n\r\n<p>You may assume that the array is non-empty and the majority element always exist in the array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [3,2,3]\r\n<strong>Output:</strong> 3</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [2,2,1,1,1,2,2]\r\n<strong>Output:</strong> 2\r\n</pre>\r\n","code":"class Solution:\n    def majorityElement(self, nums: List[int]) -> int:\n        diction={}\n        \n        for i in nums:\n            if i not in diction:\n                diction[i]=1\n            else:\n                diction[i]+=1\n        returnkrna=0\n        maxim=0\n        for keys,values in diction.items():\n            if values > maxim:\n                maxim=values\n                returnkrna=keys\n        if math.floor(len(nums)/2)<maxim:\n            return returnkrna\n                ","lang":"python3"},{"title":"Rotate Array","titleSlug":"rotate-array","status":"ac","content":"<p>Given an array, rotate the array to the right by <em>k</em> steps, where&nbsp;<em>k</em>&nbsp;is non-negative.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[1,2,3,4,5,6,7]</code> and <em>k</em> = 3\r\n<strong>Output:</strong> <code>[5,6,7,1,2,3,4]</code>\r\n<strong>Explanation:</strong>\r\nrotate 1 steps to the right: <code>[7,1,2,3,4,5,6]</code>\r\nrotate 2 steps to the right: <code>[6,7,1,2,3,4,5]\r\n</code>rotate 3 steps to the right: <code>[5,6,7,1,2,3,4]</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>[-1,-100,3,99]</code> and <em>k</em> = 2\r\n<strong>Output:</strong> [3,99,-1,-100]\r\n<strong>Explanation:</strong> \r\nrotate 1 steps to the right: [99,-1,-100,3]\r\nrotate 2 steps to the right: [3,99,-1,-100]\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li>\r\n\t<li>Could you do it in-place with O(1) extra space?</li>\r\n</ul>","code":"class Solution(object):\n    def rotate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n    \n        newlist=nums[:len(nums)-k]\n        del nums[:len(nums)-k]\n        nums.extend(newlist)\n        ","lang":"python"},{"title":"Number of 1 Bits","titleSlug":"number-of-1-bits","status":"ac","content":"<p>Write a function that takes an unsigned integer and return&nbsp;the number of &#39;1&#39;&nbsp;bits it has (also known as the <a href=\"http://en.wikipedia.org/wiki/Hamming_weight\" target=\"_blank\">Hamming weight</a>).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 00000000000000000000000000001011\r\n<strong>Output:</strong> 3\r\n<strong>Explanation: </strong>The input binary string <code><strong>00000000000000000000000000001011</strong>&nbsp;has a total of three &#39;1&#39; bits.</code>\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 00000000000000000000000010000000\r\n<strong>Output:</strong> 1\r\n<strong>Explanation: </strong>The input binary string <strong>00000000000000000000000010000000</strong>&nbsp;has a total of one &#39;1&#39; bit.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 11111111111111111111111111111101\r\n<strong>Output:</strong> 31\r\n<strong>Explanation: </strong>The input binary string <strong>11111111111111111111111111111101</strong> has a total of thirty one &#39;1&#39; bits.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>Note that in some languages such as Java, there is no unsigned integer type. In this case, the input will be given as signed integer type and should not affect your implementation, as the internal binary representation of the integer is the same whether it is signed or unsigned.</li>\r\n\t<li>In Java,&nbsp;the compiler represents the signed integers using <a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\" target=\"_blank\">2&#39;s complement notation</a>. Therefore, in <strong>Example 3</strong>&nbsp;above the input represents the signed integer <code>-3</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Follow up</b>:</p>\r\n\r\n<p>If this function is called many times, how would you optimize it?</p>\r\n","code":"class Solution(object):\n    def hammingWeight(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        x=0\n        n=\"{0:b}\".format(n)\n        for i in n:\n            c=int(i) | 0\n            x+=c\n            \n        return x\n             ","lang":"python"},{"title":"Happy Number","titleSlug":"happy-number","status":"ac","content":"<p>Write an algorithm to determine if a number is &quot;happy&quot;.</p>\r\n\r\n<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>\r\n\r\n<p><strong>Example:&nbsp;</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 19\r\n<strong>Output:</strong> true\r\n<strong>Explanation: \r\n</strong>1<sup>2</sup> + 9<sup>2</sup> = 82\r\n8<sup>2</sup> + 2<sup>2</sup> = 68\r\n6<sup>2</sup> + 8<sup>2</sup> = 100\r\n1<sup>2</sup> + 0<sup>2</sup> + 0<sup>2</sup> = 1\r\n</pre>","code":"def sep(n):\n    l=[]\n    while n > 0:\n        l.append(n%10)\n        n=math.floor(n/10)    \n    return l\nclass Solution:\n    def isHappy(self, n: int) -> bool:\n        number = sep(n)\n        z=0\n        while sum(number) != 1:\n            m=0\n            z+=1\n            for i in number:\n                m+=pow(i,2)\n            if z >10:\n                return False\n            number=sep(m)\n        return True","lang":"python3"},{"title":"Reverse Linked List","titleSlug":"reverse-linked-list","status":"ac","content":"<p>Reverse a singly linked list.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\r\n<strong>Output:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<p>A linked list can be reversed either iteratively or recursively. Could you implement both?</p>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        prev_node =None\n        while head:\n            next_node =head.next \n            head.next =prev_node \n            prev_node =head\n            head = next_node \n            \n        return prev_node ","lang":"python3"},{"title":"Course Schedule","titleSlug":"course-schedule","status":"ac","content":"<p>There are a total of <i>n</i> courses you have to take, labeled from <code>0</code> to <code>n-1</code>.</p>\r\n\r\n<p>Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: <code>[0,1]</code></p>\r\n\r\n<p>Given the total number of courses and a list of prerequisite <b>pairs</b>, is it possible for you to finish all courses?</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2, [[1,0]] \r\n<strong>Output: </strong>true\r\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \r\n&nbsp;            To take course 1 you should have finished course 0. So it is possible.</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 2, [[1,0],[0,1]]\r\n<strong>Output: </strong>false\r\n<strong>Explanation:</strong>&nbsp;There are a total of 2 courses to take. \r\n&nbsp;            To take course 1 you should have finished course 0, and to take course 0 you should\r\n&nbsp;            also have finished course 1. So it is impossible.\r\n</pre>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The input prerequisites is a graph represented by <b>a list of edges</b>, not adjacency matrices. Read more about <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs\" target=\"_blank\">how a graph is represented</a>.</li>\r\n\t<li>You may assume that there are no duplicate edges in the input prerequisites.</li>\r\n</ol>\r\n","code":"class Solution:\n    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:\n        \n        \n        graph = [[] for _ in range(numCourses)]\n        visit = [0 for _ in range(numCourses)]\n        \n        for course, pre in prerequisites:\n            graph[course].append(pre)\n            \n        def dfs(i):\n            if visit[i] == -1:\n                return False\n            if visit[i] == 1:\n                return True\n            \n            visit[i] = -1\n            \n            for j in graph[i]:\n                if not dfs(j):\n                    return False\n            \n            visit[i] = 1\n            return True\n        \n        \n\n        for i in range(numCourses):\n            if not dfs(i):\n                return False\n        \n        return True","lang":"python3"},{"title":"Contains Duplicate","titleSlug":"contains-duplicate","status":"ac","content":"<p>Given an array of integers, find if the array contains any duplicates.</p>\r\n\r\n<p>Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> [1,2,3,1]\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,2,3,4]\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[1,1,1,3,3,4,3,2,4,2]\r\n<strong>Output:</strong> true</pre>\r\n","code":"class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        og= len(nums)\n        dusra =set(nums)\n        pg= len(dusra)\n        if og -pg == 0:\n            return False\n        return True","lang":"python3"},{"title":"Kth Smallest Element in a BST","titleSlug":"kth-smallest-element-in-a-bst","status":"ac","content":"<p>Given a binary search tree, write a function <code>kthSmallest</code> to find the <b>k</b>th smallest element in it.</p>\r\n\r\n<p><b>Note: </b><br />\r\nYou may assume k is always valid, 1 &le; k &le; BST&#39;s total elements.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [3,1,4,null,2], k = 1\r\n   3\r\n  / \\\r\n 1   4\r\n  \\\r\n&nbsp;  2\r\n<strong>Output:</strong> 1</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [5,3,6,2,4,null,null,1], k = 3\r\n       5\r\n      / \\\r\n     3   6\r\n    / \\\r\n   2   4\r\n  /\r\n 1\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?</p>\r\n","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def kthSmallest(self, root: TreeNode, k: int) -> int:\n        value=[]\n        def inorder(root,value):\n            if root: \n                if root.left:\n                    value=inorder(root.left,value)\n                \n                value.append(root.val)\n            \n            \n                if root.right:\n                    value=inorder(root.right,value)\n            return value\n        value=inorder(root,value)\n        return value[k-1]\n        ","lang":"python3"},{"title":"Power of Two","titleSlug":"power-of-two","status":"ac","content":"<p>Given an integer, write a function to determine if it is a power of two.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1\r\n<strong>Output:</strong> true \r\n<strong>Explanation: </strong>2<sup>0</sup>&nbsp;= 1\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 16\r\n<strong>Output:</strong> true\r\n<strong>Explanation: </strong>2<sup>4</sup>&nbsp;= 16</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 218\r\n<strong>Output:</strong> false</pre>\r\n","code":"def truncate(number, digits):\n    stepper = pow(10.0, digits)\n    return math.trunc(stepper * number) / stepper\n\nclass Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        if n<= 0:\n            return False\n        x=math.log(n,2)\n        x= truncate(x,12)\n        if x.is_integer():\n            return True\n        \n        return False","lang":"python"},{"title":"Palindrome Linked List","titleSlug":"palindrome-linked-list","status":"ac","content":"<p>Given a singly linked list, determine if it is a palindrome.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 1-&gt;2-&gt;2-&gt;1\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it in O(n) time and O(1) space?</p>\r\n","code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        if head is None:\n            return True\n        l=[]\n        while head != None:\n            l.append(head.val)\n            head=head.next        \n        newl=copy.copy(l)\n        newl.reverse()\n        for i,j in zip(l,newl):\n            if i != j:\n                return False\n        return True","lang":"python"},{"title":"Delete Node in a Linked List","titleSlug":"delete-node-in-a-linked-list","status":"ac","content":"<p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>\r\n\r\n<p>Given linked list --&nbsp;head =&nbsp;[4,5,1,9], which looks like following:</p>\r\n\r\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/28/237_example.png\" style=\"margin-top: 5px; margin-bottom: 5px; width: 300px; height: 49px;\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 5\r\n<strong>Output:</strong> [4,1,9]\r\n<strong>Explanation: </strong>You are given the second node with value 5, the linked list should become 4 -&gt; 1 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> head = [4,5,1,9], node = 1\r\n<strong>Output:</strong> [4,5,9]\r\n<strong>Explanation: </strong>You are given the third node with value 1, the linked list should become 4 -&gt; 5 -&gt; 9 after calling your function.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The linked list will have at least two elements.</li>\r\n\t<li>All of the nodes&#39; values will be unique.</li>\r\n\t<li>The given node&nbsp;will not be the tail and it will always be a valid node of the linked list.</li>\r\n\t<li>Do not return anything from your function.</li>\r\n</ul>\r\n","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def deleteNode(self, node):\n        \"\"\"\n        :type node: ListNode\n        :rtype: void Do not return anything, modify node in-place instead.\n        \"\"\"\n        node.val=node.next.val\n        node.next=node.next.next\n        ","lang":"python3"},{"title":"Product of Array Except Self","titleSlug":"product-of-array-except-self","status":"ac","content":"<p>Given an array <code>nums</code> of <em>n</em> integers where <em>n</em> &gt; 1, &nbsp;return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>  <code>[1,2,3,4]</code>\r\n<b>Output:</b> <code>[24,12,8,6]</code>\r\n</pre>\r\n\r\n<p><strong>Note: </strong>Please solve it <strong>without division</strong> and in O(<em>n</em>).</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nCould you solve it with constant space complexity? (The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p>\r\n","code":"class Solution:\n    def productExceptSelf(self, nums: List[int]) -> List[int]:\n        mul=1\n        l=[]\n        for i in nums:\n            mul*=i\n        zeromul=1\n        for i in enumerate(nums):\n            if i[1] != 0:\n                l.append(int(mul/i[1]))\n            else:\n                zeromul=1\n                for j in enumerate(nums):\n                    if j[0]!=i[0]:\n                        zeromul *=j[1]\n                l.append(zeromul)\n        return l","lang":"python3"},{"title":"Valid Anagram","titleSlug":"valid-anagram","status":"ac","content":"<p>Given two strings <em>s</em> and <em>t&nbsp;</em>, write a function to determine if <em>t</em> is an anagram of <em>s</em>.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;anagram&quot;, <em>t</em> = &quot;nagaram&quot;\r\n<b>Output:</b> true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <em>s</em> = &quot;rat&quot;, <em>t</em> = &quot;car&quot;\r\n<b>Output: </b>false\r\n</pre>\r\n\r\n<p><strong>Note:</strong><br />\r\nYou may assume the string contains only lowercase alphabets.</p>\r\n\r\n<p><strong>Follow up:</strong><br />\r\nWhat if the inputs contain unicode characters? How would you adapt your solution to such case?</p>\r\n","code":"class Solution:\n    def isAnagram(self, s: str, t: str) -> bool:\n        if len(s) != len(t):\n            return False\n        for i,j in enumerate(s):\n            try:\n                t=t.replace(j,\"\",1)\n                s=s.replace(j,\"\",1)\n            except:\n                print(\"This is returning false: \" + j)\n                return False\n        if len(s) != len(t):\n            return False\n        return True\n        ","lang":"python3"},{"title":"Add Digits","titleSlug":"add-digits","status":"ac","content":"<p>Given a non-negative integer <code>num</code>, repeatedly add all its digits until the result has only one digit.</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>38</code>\r\n<strong>Output:</strong> 2 \r\n<strong>Explanation: </strong>The process is like: <code>3 + 8 = 11</code>, <code>1 + 1 = 2</code>. \r\n&nbsp;            Since <code>2</code> has only one digit, return it.\r\n</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without any loop/recursion in O(1) runtime?</p>","code":"def sep(n):\n    l=[]\n    if n ==0:\n        return [0]\n    while n > 0:\n        l.append(n%10)\n        n=math.floor(n/10)    \n    return l\nclass Solution:\n    def addDigits(self, num: int) -> int:\n        number=sep(num)\n        while len(number) !=1:\n            number=sep(sum(number))\n        return number[0]","lang":"python3"},{"title":"Missing Number","titleSlug":"missing-number","status":"ac","content":"<p>Given an array containing <i>n</i> distinct numbers taken from <code>0, 1, 2, ..., n</code>, find the one that is missing from the array.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [3,0,1]\r\n<b>Output:</b> 2\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [9,6,4,2,3,5,7,0,1]\r\n<b>Output:</b> 8\r\n</pre>\r\n\r\n<p><b>Note</b>:<br />\r\nYour algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p>","code":"class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n =set(nums)\n        for i in range(0,len(nums)+1):\n            if i not in n:\n                return i","lang":"python"},{"title":"Move Zeroes","titleSlug":"move-zeroes","status":"ac","content":"<p>Given an array <code>nums</code>, write a function to move all <code>0</code>&#39;s to the end of it while maintaining the relative order of the non-zero elements.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> <code>[0,1,0,3,12]</code>\r\n<b>Output:</b> <code>[1,3,12,0,0]</code></pre>\r\n\r\n<p><b>Note</b>:</p>\r\n\r\n<ol>\r\n\t<li>You must do this <b>in-place</b> without making a copy of the array.</li>\r\n\t<li>Minimize the total number of operations.</li>\r\n</ol>","code":"class Solution:\n    def moveZeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        x=len(nums)\n        for y in range(0,x):\n            i=nums[y]\n            if i == 0:\n                nums.remove(i)\n                nums.append(i)\n            ","lang":"python3"},{"title":"Word Pattern","titleSlug":"word-pattern","status":"ac","content":"<p>Given a <code>pattern</code> and a string <code>str</code>, find if <code>str</code> follows the same pattern.</p>\r\n\r\n<p>Here <b>follow</b> means a full match, such that there is a bijection between a letter in <code>pattern</code> and a <b>non-empty</b> word in <code>str</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong>pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog cat cat fish&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;aaaa&quot;</code>, str = <code>&quot;dog cat cat dog&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> pattern = <code>&quot;abba&quot;</code>, str = <code>&quot;dog dog dog dog&quot;</code>\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Notes:</b><br />\r\nYou may assume <code>pattern</code> contains only lowercase letters, and <code>str</code> contains lowercase letters that may be separated by a single space.</p>\r\n","code":"class Solution:\n    def wordPattern(self, pattern: str, str: str) -> bool:\n        dictionary= dict(zip(pattern,str.split()))\n        if(len(pattern) != len(str.split())):\n            return False\n        for keys,values in dictionary.items():\n            for key,value in dictionary.items():\n                if values == value and keys!=key:\n                    #print(values,value)\n                    return False\n\n        for i,j in zip(pattern,str.split()):\n            if dictionary[i] != j:\n                return False\n        return True\n\n","lang":"python3"},{"title":"Range Sum Query - Immutable","titleSlug":"range-sum-query-immutable","status":"ac","content":"<p>Given an integer array <i>nums</i>, find the sum of the elements between indices <i>i</i> and <i>j</i> (<i>i</i> &le; <i>j</i>), inclusive.</p>\r\n\r\n<p><b>Example:</b><br>\r\n<pre>\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>You may assume that the array does not change.</li>\r\n<li>There are many calls to <i>sumRange</i> function.</li>\r\n</ol>\r\n</p>","code":"class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.num=nums\n\n    def sumRange(self, i: int, j: int) -> int:\n        su=0\n        numss= self.num[i:j+1]\n        return sum(numss)\n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# param_1 = obj.sumRange(i,j)","lang":"python3"},{"title":"Power of Three","titleSlug":"power-of-three","status":"ac","content":"<p>Given an integer, write a function to determine if it is a power of three.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 27\r\n<strong>Output:</strong> true\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 0\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Example 3:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 9\r\n<strong>Output:</strong> true</pre>\r\n\r\n<p><b>Example 4:</b></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> 45\r\n<strong>Output:</strong> false</pre>\r\n\r\n<p><b>Follow up:</b><br />\r\nCould you do it without using any loop / recursion?</p>","code":"class Solution:\n    def isPowerOfThree(self, n: int) -> bool:\n        if n <= 0:\n            return False\n        m=math.log10(n)\n        m=m/math.log10(3)\n        print (m)\n        if m.is_integer():\n            return True\n        return False","lang":"python3"},{"title":"Counting Bits","titleSlug":"counting-bits","status":"ac","content":"<p>Given a non negative integer number <b>num</b>. For every numbers <b>i</b> in the range <b>0 &le; i &le; num</b> calculate the number of 1&#39;s in their binary representation and return them as an array.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,1]</span></pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><code>[0,1,1,2,1,2]</code>\r\n</pre>\r\n\r\n<p><b>Follow up:</b></p>\r\n\r\n<ul>\r\n\t<li>It is very easy to come up with a solution with run time <b>O(n*sizeof(integer))</b>. But can you do it in linear time <b>O(n)</b> /possibly in a single pass?</li>\r\n\t<li>Space complexity should be <b>O(n)</b>.</li>\r\n\t<li>Can you do it like a boss? Do it without using any builtin function like <b>__builtin_popcount</b> in c++ or in any other language.</li>\r\n</ul>","code":"class Solution(object):\n    def countBits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        l=[]\n        def count(n):\n            n =\"{0:b}\".format(n)\n            c=0\n            for i in n:\n                c+= int(i)\n            return c\n        for i in range(num+1):\n            l.append(count(i))\n        return l","lang":"python"},{"title":"Power of Four","titleSlug":"power-of-four","status":"ac","content":"<p>Given an integer (signed 32 bits), write a function to check whether it is a power of 4.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span></pre>\r\n</div>\r\n\r\n<p><b>Follow up</b>: Could you solve it without loops/recursion?</p>","code":"class Solution(object):\n    def isPowerOfFour(self, num):\n        if num <= 0:\n            return False\n        m=1\n        y= math.log(num,4)\n        if y.is_integer():\n            return True\n        return False","lang":"python"},{"title":"Reverse String","titleSlug":"reverse-string","status":"ac","content":"<p>Write a function that reverses a string. The input string is given as an array of characters <code>char[]</code>.</p>\r\n\r\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array&nbsp;<a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\">in-place</a></strong> with O(1) extra memory.</p>\r\n\r\n<p>You may assume all the characters consist of <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\" target=\"_blank\">printable ascii characters</a>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span>\r\n</pre>\r\n</div>\r\n</div>\r\n","code":"class Solution:\n    def reverseString(self, s: List[str]) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        y=len(s)-1\n        for i in range(y,math.floor(y/2),-1):\n            temp = s[i]\n            s[i]=s[y - i]\n            s[y -i ]=temp\n       ","lang":"python3"},{"title":"Top K Frequent Elements","titleSlug":"top-k-frequent-elements","status":"ac","content":"<p>Given a non-empty array of integers, return the <b><i>k</i></b> most frequent elements.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-1-1\">[1,1,1,2,2,3]</span>, k = <span id=\"example-input-1-2\">2</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[1,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>nums = <span id=\"example-input-2-1\">[1]</span>, k = <span id=\"example-input-2-2\">1</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[1]</span></pre>\r\n</div>\r\n\r\n<p><b>Note: </b></p>\r\n\r\n<ul>\r\n\t<li>You may assume <i>k</i> is always valid, 1 &le; <i>k</i> &le; number of unique elements.</li>\r\n\t<li>Your algorithm&#39;s time complexity <b>must be</b> better than O(<i>n</i> log <i>n</i>), where <i>n</i> is the array&#39;s size.</li>\r\n</ul>\r\n","code":"class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        nums= collections.Counter(nums)\n        newl=[]\n        for i,j in nums.most_common(k):\n            newl.append(i)\n        return newl\n        ","lang":"python"},{"title":"Valid Perfect Square","titleSlug":"valid-perfect-square","status":"ac","content":"<p>Given a positive integer <i>num</i>, write a function which returns True if <i>num</i> is a perfect square else False.</p>\r\n\r\n<p><b>Note:</b> <b>Do not</b> use any built-in library function such as <code>sqrt</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">16</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">14</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\r\n</pre>\r\n</div>\r\n</div>","code":"class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num %10 == 7 or num %10 == 3 or num %10 ==8:\n            return False\n        n=0\n        while(n <= math.ceil(num/2)):\n\n            n+=1\n            x=float(num)/n\n            if x == n:\n\n                return True\n        return False","lang":"python"},{"title":"Guess Number Higher or Lower","titleSlug":"guess-number-higher-or-lower","status":"ac","content":"<p>We are playing the Guess Game. The game is as follows:</p>\r\n\r\n<p>I pick a number from <b>1</b> to <b><i>n</i></b>. You have to guess which number I picked.</p>\r\n\r\n<p>Every time you guess wrong, I&#39;ll tell you whether the number is higher or lower.</p>\r\n\r\n<p>You call a pre-defined API <code>guess(int num)</code> which returns 3 possible results (<code>-1</code>, <code>1</code>, or <code>0</code>):</p>\r\n\r\n<pre>\r\n-1 : My number is lower\r\n 1 : My number is higher\r\n 0 : Congrats! You got it!\r\n</pre>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<div>\r\n<pre>\r\n<strong>Input: </strong>n = <span id=\"example-input-1-1\">10</span>, pick = <span id=\"example-input-1-2\">6</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">6</span>\r\n</pre>\r\n</div>\r\n","code":"# The guess API is already defined for you.\n# @param num, your guess\n# @return -1 if my number is lower, 1 if my number is higher, otherwise return 0\n# def guess(num):\n\nclass Solution(object):\n    def guessNumber(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        l= 0\n        h=n\n        \n        while (1):\n            m=(l+h)/2\n            if guess(m) == 0:\n                return m\n            elif guess(m) == 1:\n                l= m+1\n            elif guess(m) == -1:\n                h = m","lang":"python"},{"title":"Ransom Note","titleSlug":"ransom-note","status":"ac","content":"<p>\r\nGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom \r\nnote can be constructed from the magazines ; otherwise, it will return false. \r\n</p>\r\n<p>\r\nEach letter in the magazine string can only be used once in your ransom note.\r\n</p>\r\n\r\n<p><b>Note:</b><br />\r\nYou may assume that both strings contain only lowercase letters.\r\n</p>\r\n\r\n<pre>\r\ncanConstruct(\"a\", \"b\") -> false\r\ncanConstruct(\"aa\", \"ab\") -> false\r\ncanConstruct(\"aa\", \"aab\") -> true\r\n</pre>\r\n","code":"class Solution(object):\n    def canConstruct(self, ransomNote, magazine):\n        \"\"\"\n        :type ransomNote: str\n        :type magazine: str\n        :rtype: bool\n        \"\"\"\n        m=magazine\n        for i in ransomNote:\n            m=m.replace(i,\"\",1)\n        if (len(magazine)- len(ransomNote)) == len(m):\n            return True\n        return False","lang":"python"},{"title":"First Unique Character in a String","titleSlug":"first-unique-character-in-a-string","status":"ac","content":"<p>\r\nGiven a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.\r\n</p>\r\n<p><b>Examples:</b>\r\n<pre>\r\ns = \"leetcode\"\r\nreturn 0.\r\n\r\ns = \"loveleetcode\",\r\nreturn 2.\r\n</pre>\r\n</p>\r\n\r\n<p>\r\n<b>Note:</b> You may assume the string contain only lowercase letters.\r\n</p>","code":"class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        m=collections.Counter(s)\n        for i,j in enumerate(s):\n            if m[j] == 1:\n                return i\n        return -1","lang":"python"},{"title":"Find the Difference","titleSlug":"find-the-difference","status":"ac","content":"<p>\r\nGiven two strings <b><i>s</i></b> and <b><i>t</i></b> which consist of only lowercase letters.</p>\r\n\r\n<p>String <b><i>t</i></b> is generated by random shuffling string <b><i>s</i></b> and then add one more letter at a random position.</p>\r\n\r\n<p>Find the letter that was added in <b><i>t</i></b>.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nInput:\r\ns = \"abcd\"\r\nt = \"abcde\"\r\n\r\nOutput:\r\ne\r\n\r\nExplanation:\r\n'e' is the letter that was added.\r\n</pre>","code":"class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        a=0\n        b=0\n        for i in s:\n            a+=ord(i)\n        for i in t:\n            b+=ord(i)\n        return chr(b-a)","lang":"python"},{"title":"Fizz Buzz","titleSlug":"fizz-buzz","status":"ac","content":"<p>Write a program that outputs the string representation of numbers from 1 to <i>n</i>.</p>\r\n\r\n<p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\nn = 15,\r\n\r\nReturn:\r\n[\r\n    \"1\",\r\n    \"2\",\r\n    \"Fizz\",\r\n    \"4\",\r\n    \"Buzz\",\r\n    \"Fizz\",\r\n    \"7\",\r\n    \"8\",\r\n    \"Fizz\",\r\n    \"Buzz\",\r\n    \"11\",\r\n    \"Fizz\",\r\n    \"13\",\r\n    \"14\",\r\n    \"FizzBuzz\"\r\n]\r\n</pre>\r\n</p>","code":"class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        returnkr=[]\n        for i in range(1,n+1):\n            if i % 3 ==0 and i % 5 ==0:\n                returnkr.append(\"FizzBuzz\")\n            elif i %3 == 0:\n                returnkr.append(\"Fizz\")\n            elif i%5 == 0:\n                returnkr.append(\"Buzz\")\n            else:\n                returnkr.append(str(i))\n        return returnkr","lang":"python"},{"title":"Third Maximum Number","titleSlug":"third-maximum-number","status":"ac","content":"<p>Given a <b>non-empty</b> array of integers, return the <b>third</b> maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [3, 2, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> The third maximum is 1.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> [1, 2]\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b> The third maximum does not exist, so the maximum (2) is returned instead.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 3:</b><br />\r\n<pre>\r\n<b>Input:</b> [2, 2, 3, 1]\r\n\r\n<b>Output:</b> 1\r\n\r\n<b>Explanation:</b> Note that the third maximum here means the third maximum distinct number.\r\nBoth numbers with value 2 are both considered as second maximum.\r\n</pre>\r\n</p>","code":"class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        first=None\n        second =None\n        third=None\n        #first=nums[0]\n        for i in nums:\n            if first < i :\n                third =second\n                second =first\n                first=i\n            elif second < i and first != i:\n                third =second\n                second =i \n            elif third<i and second != i and first !=i:\n                third =i\n        if third !=None:\n            return third\n        return first","lang":"python"},{"title":"Arranging Coins","titleSlug":"arranging-coins","status":"ac","content":"<p>You have a total of <i>n</i> coins that you want to form in a staircase shape, where every <i>k</i>-th row must have exactly <i>k</i> coins.</p>\r\n \r\n<p>Given <i>n</i>, find the total number of <b>full</b> staircase rows that can be formed.</p>\r\n\r\n<p><i>n</i> is a non-negative integer and fits within the range of a 32-bit signed integer.</p>\r\n\r\n<p><b>Example 1:</b>\r\n<pre>\r\nn = 5\r\n\r\nThe coins can form the following rows:\r\n¤\r\n¤ ¤\r\n¤ ¤\r\n\r\nBecause the 3rd row is incomplete, we return 2.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b>\r\n<pre>\r\nn = 8\r\n\r\nThe coins can form the following rows:\r\n¤\r\n¤ ¤\r\n¤ ¤ ¤\r\n¤ ¤\r\n\r\nBecause the 4th row is incomplete, we return 3.\r\n</pre>\r\n</p>","code":"int arrangeCoins(int n) {\n    int i=1,count=0;\n    unsigned int diff =n ;\n    while(diff>=i){\n        diff=diff-i;\n        i+=1;\n        count+=1;\n    }\n    return count;\n}","lang":"c"},{"title":"Find All Numbers Disappeared in an Array","titleSlug":"find-all-numbers-disappeared-in-an-array","status":"ac","content":"<p>Given an array of integers where 1 &le; a[i] &le; <i>n</i> (<i>n</i> = size of array), some elements appear twice and others appear once.</p>\r\n\r\n<p>Find all the elements of [1, <i>n</i>] inclusive that do not appear in this array.</p>\r\n\r\n<p>Could you do it without extra space and in O(<i>n</i>) runtime? You may assume the returned list does not count as extra space.</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b>\r\n[4,3,2,7,8,2,3,1]\r\n\r\n<b>Output:</b>\r\n[5,6]\r\n</pre>\r\n</p>","code":"class Solution:\n    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:\n        x=len(nums)\n        nums=set(nums)\n        \n        for i in range(1,x+1):\n            try:\n                nums.remove(i)\n            except:\n                nums.add(i)\n            #print(nums)\n        nums=list(nums)\n        return nums","lang":"python3"},{"title":"Hamming Distance","titleSlug":"hamming-distance","status":"ac","content":"<p>The <a href=\"https://en.wikipedia.org/wiki/Hamming_distance\" target=\"_blank\">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p>\r\n\r\n<p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p>\r\n\r\n<p><b>Note:</b><br />\r\n0 &le; <code>x</code>, <code>y</code> &lt; 2<sup>31</sup>.\r\n</p>\r\n\r\n<p><b>Example:</b>\r\n<pre>\r\n<b>Input:</b> x = 1, y = 4\r\n\r\n<b>Output:</b> 2\r\n\r\n<b>Explanation:</b>\r\n1   (0 0 0 1)\r\n4   (0 1 0 0)\r\n       &uarr;   &uarr;\r\n\r\nThe above arrows point to positions where the corresponding bits are different.\r\n</pre>\r\n</p>","code":"class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        x=format(x,'032b')\n        y=format(y,'032b')\n        sumo=0\n        #print(x,y)\n        for i,j in zip(x,y):\n            if i!=j:\n                sumo+=1\n        return sumo\n        ","lang":"python"},{"title":"Relative Ranks","titleSlug":"relative-ranks","status":"ac","content":"<p>\r\nGiven scores of <b>N</b> athletes, find their relative ranks and the people with the top three highest scores, who will be awarded medals: \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\".</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> [5, 4, 3, 2, 1]\r\n<b>Output:</b> [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\", \"4\", \"5\"]\r\n<b>Explanation:</b> The first three athletes got the top three highest scores, so they got \"Gold Medal\", \"Silver Medal\" and \"Bronze Medal\". <br/>For the left two athletes, you just need to output their relative ranks according to their scores.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>N is a positive integer and won't exceed 10,000.</li>\r\n<li>All the scores of athletes are guaranteed to be unique.</li>\r\n</ol>\r\n</p>\r\n","code":"class Solution(object):\n    def findRelativeRanks(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        n =sorted(nums)\n        n.reverse()\n        x=1\n        returnkr=[0]*len(nums)\n        for i in n:\n            if(x<=3):\n                if x ==1:\n                    returnkr[nums.index(i)] =\"Gold Medal\"\n                elif x ==2:\n                    returnkr[nums.index(i)] =\"Silver Medal\"\n                elif x ==3:\n                    returnkr[nums.index(i)] =\"Bronze Medal\"\n                x+=1\n            else:\n                returnkr[nums.index(i)]=str(x)\n                x+=1\n        return returnkr","lang":"python"},{"title":"Detect Capital","titleSlug":"detect-capital","status":"ac","content":"<p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p>\r\n\r\n<p>We define the usage of capitals in a word to be right when one of the following cases holds:</p>\r\n\r\n<ol>\r\n\t<li>All letters in this word are capitals, like &quot;USA&quot;.</li>\r\n\t<li>All letters in this word are not capitals, like &quot;leetcode&quot;.</li>\r\n\t<li>Only the first letter in this word is capital, like &quot;Google&quot;.</li>\r\n</ol>\r\nOtherwise, we define that this word doesn&#39;t use capitals in a right way.\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;USA&quot;\r\n<b>Output:</b> True\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;FlaG&quot;\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> The input will be a non-empty word consisting of uppercase and lowercase latin letters.</p>\r\n","code":"class Solution:\n    def detectCapitalUse(self, word: str) -> bool:\n        text=0\n        if len(word) <=1:\n            return True\n        if word.isupper() != True:\n            if word[1:].islower():\n                return True\n            else:\n                return False\n       \n        return True","lang":"python3"},{"title":"Minimum Absolute Difference in BST","titleSlug":"minimum-absolute-difference-in-bst","status":"ac","content":"<p>Given a binary search tree with non-negative values, find the minimum <a href=\"https://en.wikipedia.org/wiki/Absolute_difference\">absolute difference</a> between values of any two nodes.</p>\r\n\r\n<p><b>Example:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b>\r\n\r\n   1\r\n    \\\r\n     3\r\n    /\r\n   2\r\n\r\n<b>Output:</b>\r\n1\r\n\r\n<b>Explanation:</b>\r\nThe minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> There are at least two nodes in this BST.</p>","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\ndef bfs(root):\n    to_visit=[root]\n    senback=[root.val]\n    while to_visit:\n        current=to_visit.pop()\n        if current.left:\n            to_visit.append(current.left)\n            senback.append(current.left.val)\n        if current.right:\n            to_visit.append(current.right)\n            senback.append(current.right.val)\n    return senback\n            \nclass Solution:\n    def getMinimumDifference(self, root: TreeNode) -> int:\n        returned=bfs(root)\n        minlist=[]\n        for i in range(0,len(returned)):\n            for j in range(i+1,len(returned)):\n                minlist.append(abs(returned[i]-returned[j]))\n                if abs(returned[i]-returned[j]) ==1:\n                    return 1\n        minlist=sorted(minlist)\n        return minlist[0]","lang":"python3"},{"title":"Convert BST to Greater Tree","titleSlug":"convert-bst-to-greater-tree","status":"ac","content":"<p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p>\r\n\r\n<p>\r\n<b>Example:</b>\r\n<pre>\r\n<b>Input:</b> The root of a Binary Search Tree like this:\r\n              5\r\n            /   \\\r\n           2     13\r\n\r\n<b>Output:</b> The root of a Greater Tree like this:\r\n             18\r\n            /   \\\r\n          20     13\r\n</pre>\r\n</p>","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def dfs(self,root,val):\n        if root.left:\n            val=self.dfs(root.left,val)\n        val.append(root.val)\n        if root.right:\n            val=self.dfs(root.right,val)\n        return val\n    \n    def secdfs(self,root,x):\n        if root.left:\n            x=self.secdfs(root.left,x)\n        x=x-root.val\n        root.val=x+root.val\n        if root.right:\n            x=self.secdfs(root.right,x)\n        return x\n    \n    \n    def convertBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        if root is None:\n            return root\n        val=[]\n        val=self.dfs(root,val)\n        x=sum(val)\n        self.secdfs(root,x)\n        return root\n    ","lang":"python"},{"title":"Single Element in a Sorted Array","titleSlug":"single-element-in-a-sorted-array","status":"ac","content":"<p>Given a sorted array consisting of only integers where every element appears exactly twice except for one element which appears exactly&nbsp;once. Find this single element that appears only once.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,1,2,3,3,4,4,8,8]\r\n<b>Output:</b> 2\r\n</pre>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [3,3,7,7,10,11,11]\r\n<b>Output:</b> 10\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b> Your solution should run in O(log n) time and O(1) space.</p>\r\n","code":"class Solution(object):\n    def singleNonDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums=collections.Counter(nums)\n        i,j=nums.most_common()[-1]\n        return i","lang":"python"},{"title":"Construct String from Binary Tree","titleSlug":"construct-string-from-binary-tree","status":"ac","content":"<p>You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.</p>\r\n\r\n<p>The null node needs to be represented by empty parenthesis pair \"()\". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n   /    \r\n  4     \r\n\r\n<b>Output:</b> \"1(2(4))(3)\"\r\n<br/><b>Explanation:</b> Originallay it needs to be \"1(2(4)())(3()())\", <br/>but you need to omit all the unnecessary empty parenthesis pairs. <br/>And it will be \"1(2(4))(3)\".\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> Binary tree: [1,2,3,null,4]\r\n       1\r\n     /   \\\r\n    2     3\r\n     \\  \r\n      4 \r\n\r\n<b>Output:</b> \"1(2()(4))(3)\"\r\n<br/><b>Explanation:</b> Almost the same as the first example, <br/>except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\r\n</pre>\r\n</p>","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def tree2str(self, t: TreeNode) -> str:\n        s=\"\"\n        if not t:\n            return s\n        def dfs(root,s):\n            s+=str(root.val)\n            \n            if root.left:\n                s+=\"(\"\n                s=dfs(root.left,s)\n                s+=\")\"\n            if not root.left and root.right:\n                s+=\"()\"\n            if root.right:\n                s+=\"(\"\n                s=dfs(root.right,s)\n                s+=\")\"\n            return s\n        s=dfs(t,s)\n        return s","lang":"python3"},{"title":"Swap Salary","titleSlug":"swap-salary","status":"ac","content":"<p>Given a table <code>salary</code>, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a <strong>single update statement</strong> and no intermediate temp table.</p>\r\n\r\n<p>Note that you must write a single update statement, <strong>DO NOT</strong> write any select statement for this problem.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | m   | 2500   |\r\n| 2  | B    | f   | 1500   |\r\n| 3  | C    | m   | 5500   |\r\n| 4  | D    | f   | 500    |\r\n</pre>\r\nAfter running your <strong>update</strong> statement, the above salary table should have the following rows:\r\n\r\n<pre>\r\n| id | name | sex | salary |\r\n|----|------|-----|--------|\r\n| 1  | A    | f   | 2500   |\r\n| 2  | B    | m   | 1500   |\r\n| 3  | C    | f   | 5500   |\r\n| 4  | D    | m   | 500    |\r\n</pre>\r\n","code":"# Write your MySQL query statement belo\nupdate salary\nSET\n    sex=Case sex\n    when 'm' then 'f'\n    else 'm'\n    end;","lang":"mysql"},{"title":"Maximum Product of Three Numbers","titleSlug":"maximum-product-of-three-numbers","status":"ac","content":"<p>Given an integer array, find three numbers whose product is maximum and output the maximum product.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3]\r\n<b>Output:</b> 6\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> [1,2,3,4]\r\n<b>Output:</b> 24\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ol>\r\n\t<li>The length of the given array will be in range [3,10<sup>4</sup>] and all elements are in the range [-1000, 1000].</li>\r\n\t<li>Multiplication of any three numbers in the input won&#39;t exceed the range of 32-bit signed integer.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n","code":"class Solution(object):\n    def maximumProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        nums=sorted(nums)\n        return max(nums[-1]*nums[-2]*nums[-3],nums[-1]*nums[0]*nums[1])","lang":"python"},{"title":"Average of Levels in Binary Tree","titleSlug":"average-of-levels-in-binary-tree","status":"ac","content":"Given a non-empty binary tree, return the average value of the nodes on each level in the form of an array.\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\n    3\r\n   / \\\r\n  9  20\r\n    /  \\\r\n   15   7\r\n<b>Output:</b> [3, 14.5, 11]\r\n<b>Explanation:</b>\r\nThe average value of nodes on level 0 is 3,  on level 1 is 14.5, and on level 2 is 11. Hence return [3, 14.5, 11].\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li>The range of node's value is in the range of 32-bit signed integer.</li>\r\n</ol>\r\n</p>","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def averageOfLevels(self, root: TreeNode) -> List[float]:\n        current=[root]\n        value=[]\n        temp=0\n        next_level=[]\n        prev_length=1\n        while current:\n            current_node=current.pop()\n            \n            if current_node.left:\n                next_level.append(current_node.left)\n            if current_node.right:\n                next_level.append(current_node.right)\n            temp+=current_node.val\n            if len(current) == 0 and len(next_level) !=None:\n                temp/=prev_length\n                current=copy.copy(next_level)\n                prev_length = len(next_level)\n                del next_level[:]\n                value.append(temp)\n                temp=0\n        return value\n                ","lang":"python3"},{"title":"Two Sum IV - Input is a BST","titleSlug":"two-sum-iv-input-is-a-bst","status":"ac","content":"<p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nTarget = 9\r\n\r\n<b>Output:</b> True\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\n    5\r\n   / \\\r\n  3   6\r\n / \\   \\\r\n2   4   7\r\n\r\nTarget = 28\r\n\r\n<b>Output:</b> False\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def findTarget(self, root, k):\n        \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        lis=set()\n        def dfs(root,lis):\n            if root.left:\n                lis=dfs(root.left,lis)\n            lis.add(root.val)\n            if root.right:\n                lis=dfs(root.right,lis)\n            return lis\n        \n        lis=dfs(root,lis)\n        for i in lis:\n            if k-i in lis and k-i != i:\n                return True\n            \n        return False","lang":"python"},{"title":"Robot Return to Origin","titleSlug":"robot-return-to-origin","status":"ac","content":"<p>There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot <strong>ends up at (0, 0)</strong> after it completes its moves.</p>\r\n\r\n<p>The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.</p>\r\n\r\n<p><strong>Note</strong>: The way that the robot is &quot;facing&quot; is irrelevant. &quot;R&quot; will always make the robot move to the right once, &quot;L&quot; will always make it move left, etc. Also, assume that the magnitude of the robot&#39;s movement is the same for each move.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;UD&quot;\r\n<b>Output:</b> true \r\n<strong>Explanation</strong>: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> &quot;LL&quot;\r\n<b>Output:</b> false\r\n<strong>Explanation</strong>: The robot moves left twice. It ends up two &quot;moves&quot; to the left of the origin. We return false because it is not at the origin at the end of its moves.\r\n</pre>\r\n","code":"bool judgeCircle(char* moves) {\n    int i;\n    int pos[2]={0,0};\n    for(i=0;i<strlen(moves);i++){\n        if(moves[i]=='L'){\n            pos[1]+=1;\n        }\n        else if(moves[i]=='R'){\n            pos[1]-=1;\n        }\n        else if(moves[i]=='U'){\n            pos[0]+=1;\n        }\n        else{pos[0]-=1;}\n    }\n    if(pos[0]==0 && pos[1]==0){\n        return true;\n    }\n    else{return false;}\n    \n}","lang":"c"},{"title":"Map Sum Pairs","titleSlug":"map-sum-pairs","status":"ac","content":"<p>\r\nImplement a MapSum class with <code>insert</code>, and <code>sum</code> methods.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>insert</code>, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n</p>\r\n\r\n<p>\r\nFor the method <code>sum</code>, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n</p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n</pre>\r\n</p>\r\n","code":"class MapSum(object):\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.dic={}\n\n    def insert(self, key, val):\n        \"\"\"\n        :type key: str\n        :type val: int\n        :rtype: None\n        \"\"\"\n        self.dic[key]=val\n        \n\n    def sum(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: int\n        \"\"\"\n        newlist=self.dic.keys()\n        matching = [s for s in newlist if prefix in s[:len(prefix)]]\n        sumo=0\n        print(self.dic,prefix,matching)\n        while matching:\n            sumo+=self.dic[matching.pop(0)]\n        return sumo\n\n# Your MapSum object will be instantiated and called as such:\n# obj = MapSum()\n# obj.insert(key,val)\n# param_2 = obj.sum(prefix)","lang":"python"},{"title":"Find Pivot Index","titleSlug":"find-pivot-index","status":"ac","content":"<p>Given an array of integers <code>nums</code>, write a method that returns the &quot;pivot&quot; index of this array.</p>\r\n\r\n<p>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.</p>\r\n\r\n<p>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.</p>\r\n\r\n<p><b>Example 1:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 7, 3, 6, 5, 6]\r\n<b>Output:</b> 3\r\n<b>Explanation:</b> \r\nThe sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.\r\nAlso, 3 is the first index where this occurs.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Example 2:</b></p>\r\n\r\n<pre>\r\n<b>Input:</b> \r\nnums = [1, 2, 3]\r\n<b>Output:</b> -1\r\n<b>Explanation:</b> \r\nThere is no index that satisfies the conditions in the problem statement.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><b>Note:</b></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>nums</code> will be in the range <code>[0, 10000]</code>.</li>\r\n\t<li>Each element <code>nums[i]</code> will be an integer in the range <code>[-1000, 1000]</code>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n","code":"class Solution:\n    def pivotIndex(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return -1\n        summing =sum(nums)\n        reverse_sum = 0\n        for i in enumerate(nums):\n            summing -= i[1]\n            if reverse_sum == summing:\n                return i[0]\n            \n            reverse_sum += i[1]   \n        return -1\n            ","lang":"python3"},{"title":"Self Dividing Numbers","titleSlug":"self-dividing-numbers","status":"ac","content":"<p>\r\nA <i>self-dividing number</i> is a number that is divisible by every digit it contains.\r\n</p><p>\r\nFor example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.\r\n</p><p>\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n</p><p>\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n</p>\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> \r\nleft = 1, right = 22\r\n<b>Output:</b> [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b>\r\n<li>The boundaries of each input argument are <code>1 <= left <= right <= 10000</code>.</li>\r\n</p>","code":"class Solution(object):\n    \n    def sep(self,n):\n        l=[]\n        while n > 0:\n            l.append(n%10)\n            if l[-1] ==0:\n                return False\n            n=n/10\n        return l\n        \n    def check(self,n,m):\n        k=[]\n        for i in m:\n            if n % i ==0:\n                k.append(True)\n        return k\n    \n    def selfDividingNumbers(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: List[int]\n        \"\"\"\n        l=[]\n        for i in range(left,right+1):\n            if self.sep(i) is not False:\n                m=self.sep(i)\n                if len(self.check(i,m)) ==len(m):\n                    l.append(i)\n        return l\n                    ","lang":"python"},{"title":"To Lower Case","titleSlug":"to-lower-case","status":"ac","content":"<p>Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;Hello&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">&quot;hello&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;here&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">&quot;here&quot;</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;LOVELY&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">&quot;lovely&quot;</span>\r\n</pre>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"char* toLowerCase(char* str) {\n    int i = 0;\n    while(str[i]!='\\0'){\n        if(64<str[i] && str[i]<91)\n            str[i] = str[i] +32;\n        i++;\n    }\n    return str;\n}","lang":"c"},{"title":"Find Smallest Letter Greater Than Target","titleSlug":"find-smallest-letter-greater-than-target","status":"ac","content":"<p>\r\nGiven a list of sorted characters <code>letters</code> containing only lowercase letters, and given a target letter <code>target</code>, find the smallest element in the list that is larger than the given target.\r\n</p><p>\r\nLetters also wrap around.  For example, if the target is <code>target = 'z'</code> and <code>letters = ['a', 'b']</code>, the answer is <code>'a'</code>.\r\n</p>\r\n\r\n<p><b>Examples:</b><br />\r\n<pre>\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"a\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"c\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"d\"\r\n<b>Output:</b> \"f\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"g\"\r\n<b>Output:</b> \"j\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"j\"\r\n<b>Output:</b> \"c\"\r\n\r\n<b>Input:</b>\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"k\"\r\n<b>Output:</b> \"c\"\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>letters</code> has a length in range <code>[2, 10000]</code>.</li>\r\n<li><code>letters</code> consists of lowercase letters, and contains at least 2 unique letters.</li>\r\n<li><code>target</code> is a lowercase letter.</li>\r\n</ol>\r\n</p>","code":"class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        #dic=dict(zip([chr(i) for i in range(97,123)],[j for j in range(97,123)]))\n        fil=filter(lambda x:ord(x) > ord(target),letters)\n\n        if len(fil)==0:\n            return letters.pop(0)\n        else:\n            return fil.pop(0)","lang":"python"},{"title":"Largest Number At Least Twice of Others","titleSlug":"largest-number-at-least-twice-of-others","status":"ac","content":"<p>In a given integer array <code>nums</code>, there is always exactly one largest element.</p>\r\n\r\n<p>Find whether the largest element in the array is at least twice as much as every other number in the array.</p>\r\n\r\n<p>If it is, return the <strong>index</strong> of the largest element, otherwise return -1.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [3, 6, 1, 0]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong> 6 is the largest integer, and for every other number in the array x,\r\n6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [1, 2, 3, 4]\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 4 isn&#39;t at least as big as twice the value of 3, so we return -1.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>nums</code> will have a length in the range <code>[1, 50]</code>.</li>\r\n\t<li>Every <code>nums[i]</code> will be an integer in the range <code>[0, 99]</code>.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n","code":"class Solution:\n    def dominantIndex(self, nums: List[int]) -> int:\n        maximum=0\n        index=0\n        for i in enumerate(nums):\n            if maximum < i[1]:\n                maximum = i[1]\n                index=i[0]\n        for i in enumerate(nums):\n            if i[1] != 0 and i[0] != index:\n                    if maximum - (i[1]*2) < 0:\n                        return -1\n                \n        return index","lang":"python3"},{"title":"Shortest Completing Word","titleSlug":"shortest-completing-word","status":"ac","content":"<p>\r\nFind the minimum length word from a given dictionary <code>words</code>, which has all the letters from the string <code>licensePlate</code>.  Such a word is said to <i>complete</i> the given string <code>licensePlate</code>\r\n</p><p>\r\nHere, for letters we ignore case.  For example, <code>\"P\"</code> on the <code>licensePlate</code> still matches <code>\"p\"</code> on the word.\r\n</p><p>\r\nIt is guaranteed an answer exists.  If there are multiple answers, return the one that occurs first in the array.\r\n</p><p>\r\nThe license plate might have the same letter occurring multiple times.  For example, given a <code>licensePlate</code> of <code>\"PP\"</code>, the word <code>\"pair\"</code> does not complete the <code>licensePlate</code>, but the word <code>\"supper\"</code> does.\r\n</p><p>\r\n\r\n<p><b>Example 1:</b><br />\r\n<pre>\r\n<b>Input:</b> licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\r\n<b>Output:</b> \"steps\"\r\n<b>Explanation:</b> The smallest length word that contains the letters \"S\", \"P\", \"S\", and \"T\".\r\nNote that the answer is not \"step\", because the letter \"s\" must occur in the word twice.\r\nAlso note that we ignored case for the purposes of comparing whether a letter exists in the word.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Example 2:</b><br />\r\n<pre>\r\n<b>Input:</b> licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\r\n<b>Output:</b> \"pest\"\r\n<b>Explanation:</b> There are 3 smallest length words that contains the letters \"s\".\r\nWe return the one that occurred first.\r\n</pre>\r\n</p>\r\n\r\n<p><b>Note:</b><br>\r\n<ol>\r\n<li><code>licensePlate</code> will be a string with length in range <code>[1, 7]</code>.</li>\r\n<li><code>licensePlate</code> will contain digits, spaces, or letters (uppercase or lowercase).</li>\r\n<li><code>words</code> will have a length in the range <code>[10, 1000]</code>.</li>\r\n<li>Every <code>words[i]</code> will consist of lowercase letters, and have length in range <code>[1, 15]</code>.</li>\r\n</ol>\r\n</p>","code":"class Solution:\n    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:\n        number=\"\"\n        for i in licensePlate:\n            if i.isalpha():\n                number+=i.lower()\n        leng=[math.inf,0]\n        for j in words:\n            m=copy.copy(j)\n            new=copy.copy(number)\n            for i in number:\n                \n                if i in m:\n                    new=new.replace(i,\"\",1)\n                    m=m.replace(i,\"\",1)\n            if len(m)  < leng[0] and len(new)==0:\n                leng[0]=len(m)\n                leng[1]=j\n        return leng[1]\n            ","lang":"python3"},{"title":"Jewels and Stones","titleSlug":"jewels-and-stones","status":"ac","content":"<p>You&#39;re given strings <code>J</code> representing the types of stones that are jewels, and <code>S</code> representing the stones you have.&nbsp; Each character in <code>S</code> is a type of stone you have.&nbsp; You want to know how many of the stones you have are also jewels.</p>\r\n\r\n<p>The letters in <code>J</code> are guaranteed distinct, and all characters in <code>J</code> and <code>S</code> are letters. Letters are case sensitive, so <code>&quot;a&quot;</code> is considered a different type of stone from <code>&quot;A&quot;</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;\r\n<strong>Output:</strong> 3\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> J = &quot;z&quot;, S = &quot;ZZ&quot;\r\n<strong>Output:</strong> 0\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>S</code> and <code>J</code> will consist of letters and have length at most 50.</li>\r\n\t<li>The characters in <code>J</code> are distinct.</li>\r\n</ul>\r\n","code":"int numJewelsInStones(char* J, char* S) {\n    int i,j,op=0;\n    for(i=0;i<strlen(S);i++){\n        for(j=0;j<strlen(J);j++){\n            if(S[i] == J[j]){\n                op+=1;\n            break;\n            }\n        }\n    }\n    return op;\n}","lang":"c"},{"title":"Search in a Binary Search Tree","titleSlug":"search-in-a-binary-search-tree","status":"ac","content":"<p>Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node&#39;s value equals the given value. Return the subtree rooted with that node. If such node doesn&#39;t exist, you should return NULL.</p>\r\n\r\n<p>For example,&nbsp;</p>\r\n\r\n<pre>\r\nGiven the tree:\r\n        4\r\n       / \\\r\n      2   7\r\n     / \\\r\n    1   3\r\n\r\nAnd the value to search: 2\r\n</pre>\r\n\r\n<p>You should return this subtree:</p>\r\n\r\n<pre>\r\n      2     \r\n     / \\   \r\n    1   3\r\n</pre>\r\n\r\n<p>In the example above, if we want to search the value <code>5</code>, since there is no node with value <code>5</code>, we should return <code>NULL</code>.</p>\r\n\r\n<p>Note that an empty tree is represented by <code>NULL</code>, therefore you would see the expected output (serialized tree format) as&nbsp;<code>[]</code>, not <code>null</code>.</p>\r\n","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def searchBST(self, root: TreeNode, val: int) -> TreeNode:\n        if root is None:\n            return None\n        if val ==root.val:\n            return root\n        elif val < root.val:\n            return self.searchBST(root.left,val)\n        else:\n            return self.searchBST(root.right,val)\n            \n","lang":"python3"},{"title":"Global and Local Inversions","titleSlug":"global-and-local-inversions","status":"ac","content":"<p>We have some permutation <code>A</code> of <code>[0, 1, ..., N - 1]</code>, where <code>N</code> is the length of <code>A</code>.</p>\r\n\r\n<p>The number of (global) inversions is the number of <code>i &lt; j</code> with <code>0 &lt;= i &lt; j &lt; N</code> and <code>A[i] &gt; A[j]</code>.</p>\r\n\r\n<p>The number of local inversions is the number of <code>i</code> with <code>0 &lt;= i &lt; N</code> and <code>A[i] &gt; A[i+1]</code>.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if the number of global inversions is equal to the number of local inversions.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,0,2]\r\n<strong>Output:</strong> true\r\n<strong>Explanation:</strong> There is 1 global inversion, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> A = [1,2,0]\r\n<strong>Output:</strong> false\r\n<strong>Explanation:</strong> There are 2 global inversions, and 1 local inversion.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>A</code> will be a permutation of <code>[0, 1, ..., A.length - 1]</code>.</li>\r\n\t<li><code>A</code> will have length in range <code>[1, 5000]</code>.</li>\r\n\t<li>The time limit for this problem has been reduced.</li>\r\n</ul>\r\n","code":"class Solution(object):\n    def isIdealPermutation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        for i in range(len(A)):\n            if abs(A[i]-i) >1 :\n                return False\n        return True","lang":"python3"},{"title":"Binary Search","titleSlug":"binary-search","status":"ac","content":"<p>Given a <strong>sorted</strong> (in ascending order) integer array <code>nums</code> of <code>n</code> elements and a <code>target</code> value, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index, otherwise return <code>-1</code>.</p>\r\n\r\n<p><br />\r\n<strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 9\r\n<strong>Output:</strong> 4\r\n<strong>Explanation:</strong> 9 exists in <code>nums</code> and its index is 4\r\n\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> <code>nums</code> = [-1,0,3,5,9,12], <code>target</code> = 2\r\n<strong>Output:</strong> -1\r\n<strong>Explanation:</strong> 2 does not exist in <code>nums</code> so return -1\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>You may assume that all elements in <code>nums</code> are unique.</li>\r\n\t<li><code>n</code> will be in the range <code>[1, 10000]</code>.</li>\r\n\t<li>The value of each element in <code>nums</code> will be in the range <code>[-9999, 9999]</code>.</li>\r\n</ol>\r\n","code":"class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        low=0\n        high=len(nums)-1\n        while low<=high:\n            mid = (low+high)//2\n            if nums[mid]==target:\n                return mid\n            if nums[low]<= target <= nums[mid]:\n                high=mid-1\n            else:\n                low=mid+1\n        return -1","lang":"python3"},{"title":"Minimum Distance Between BST Nodes","titleSlug":"minimum-distance-between-bst-nodes","status":"ac","content":"<p>Given a Binary Search Tree (BST) with the root node <code>root</code>, return&nbsp;the minimum difference between the values of any two different nodes in the tree.</p>\r\n\r\n<p><strong>Example :</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> root = [4,2,6,1,3,null,null]\r\n<strong>Output:</strong> 1\r\n<strong>Explanation:</strong>\r\nNote that root is a TreeNode object, not an array.\r\n\r\nThe given tree [4,2,6,1,3,null,null] is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    \r\n    1   3  \r\n\r\nwhile the minimum difference in this tree is 1, it occurs between node 1 and node 2, also between node 3 and node 2.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The size of the BST will be between 2 and&nbsp;<code>100</code>.</li>\r\n\t<li>The BST is always valid, each node&#39;s value is an integer, and each node&#39;s value is different.</li>\r\n</ol>","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    \n    def bfs(self,node,v):\n        if node.left:\n            v=self.bfs(node.left,v)\n        v.append(node.val)\n        if node.right:\n            v=self.bfs(node.right,v)\n        return v\n    \n    \n    def minDiffInBST(self, root: TreeNode) -> int:\n        v=[]\n        v=self.bfs(root,v)\n        mini=max(v)\n        for i,j in enumerate(v):\n            for k in v[i+1:]:\n                if mini> abs(k-j):\n                    mini=abs(k-j)\n        return mini","lang":"python3"},{"title":"Unique Morse Code Words","titleSlug":"unique-morse-code-words","status":"ac","content":"<p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code>, <code>&quot;b&quot;</code> maps to <code>&quot;-...&quot;</code>, <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code>, and so on.</p>\r\n\r\n<p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p>\r\n\r\n<pre>\r\n[&quot;.-&quot;,&quot;-...&quot;,&quot;-.-.&quot;,&quot;-..&quot;,&quot;.&quot;,&quot;..-.&quot;,&quot;--.&quot;,&quot;....&quot;,&quot;..&quot;,&quot;.---&quot;,&quot;-.-&quot;,&quot;.-..&quot;,&quot;--&quot;,&quot;-.&quot;,&quot;---&quot;,&quot;.--.&quot;,&quot;--.-&quot;,&quot;.-.&quot;,&quot;...&quot;,&quot;-&quot;,&quot;..-&quot;,&quot;...-&quot;,&quot;.--&quot;,&quot;-..-&quot;,&quot;-.--&quot;,&quot;--..&quot;]</pre>\r\n\r\n<p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, &quot;cba&quot; can be written as &quot;-.-..--...&quot;, (which is the concatenation &quot;-.-.&quot; + &quot;-...&quot; + &quot;.-&quot;). We&#39;ll call such a concatenation, the transformation&nbsp;of a word.</p>\r\n\r\n<p>Return the number of different transformations among all words we have.</p>\r\n\r\n<pre>\r\n<strong>Example:</strong>\r\n<strong>Input:</strong> words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]\r\n<strong>Output:</strong> 2\r\n<strong>Explanation: </strong>\r\nThe transformation of each word is:\r\n&quot;gin&quot; -&gt; &quot;--...-.&quot;\r\n&quot;zen&quot; -&gt; &quot;--...-.&quot;\r\n&quot;gig&quot; -&gt; &quot;--...--.&quot;\r\n&quot;msg&quot; -&gt; &quot;--...--.&quot;\r\n\r\nThere are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;.\r\n</pre>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The length of <code>words</code> will be at most <code>100</code>.</li>\r\n\t<li>Each <code>words[i]</code> will have length in range <code>[1, 12]</code>.</li>\r\n\t<li><code>words[i]</code> will only consist of lowercase letters.</li>\r\n</ul>\r\n","code":"class Solution(object):\n    def uniqueMorseRepresentations(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        l=[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n        m=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n        newdic=dict(zip(m,l))\n        ret=set()\n        #print(newdic)\n        for j in words:\n            newword=\"\"\n            for k in j:\n                newword += newdic[k]\n            ret.add(newword)\n            newword= \"\"\n        #print(newword,ret)\n        \n        \n        return len(ret)","lang":"python"},{"title":"Most Common Word","titleSlug":"most-common-word","status":"ac","content":"<p>Given a paragraph&nbsp;and a list of banned words, return the most frequent word that is not in the list of banned words.&nbsp; It is guaranteed there is at least one word that isn&#39;t banned, and that the answer is unique.</p>\r\n\r\n<p>Words in the list of banned words are given in lowercase, and free of punctuation.&nbsp; Words in the paragraph are not case sensitive.&nbsp; The answer is in lowercase.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> \r\nparagraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;\r\nbanned = [&quot;hit&quot;]\r\n<strong>Output:</strong> &quot;ball&quot;\r\n<strong>Explanation:</strong> \r\n&quot;hit&quot; occurs 3 times, but it is a banned word.\r\n&quot;ball&quot; occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \r\nNote that words in the paragraph are not case sensitive,\r\nthat punctuation is ignored (even if adjacent to words, such as &quot;ball,&quot;), \r\nand that &quot;hit&quot; isn&#39;t the answer even though it occurs more because it is banned.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note: </strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= paragraph.length &lt;= 1000</code>.</li>\r\n\t<li><code>0 &lt;= banned.length &lt;= 100</code>.</li>\r\n\t<li><code>1 &lt;= banned[i].length &lt;= 10</code>.</li>\r\n\t<li>The answer is unique, and written in lowercase (even if its occurrences in <code>paragraph</code>&nbsp;may have&nbsp;uppercase symbols, and even if it is a proper noun.)</li>\r\n\t<li><code>paragraph</code> only consists of letters, spaces, or the punctuation symbols <code>!?&#39;,;.</code></li>\r\n\t<li>There are no hyphens or hyphenated words.</li>\r\n\t<li>Words only consist of letters, never apostrophes or other punctuation symbols.</li>\r\n</ul>\r\n","code":"class Solution(object):\n    def mostCommonWord(self, paragraph, banned):\n        \"\"\"\n        :type paragraph: str\n        :type banned: List[str]\n        :rtype: str\n        \"\"\"\n        l=[]\n        paragraph = paragraph.lower()\n        for word in paragraph:\n            if not word.isalpha():\n                if not word ==\" \":\n                    paragraph=paragraph.replace(word,\" \",1)\n        for word in paragraph.split():\n            if word not in l and word not in banned:\n                l.append(word)\n                #print(word)\n                \n        \n        maxi= 0\n        for i in l:\n            temp = 0\n            for j in paragraph.split():\n                if i == j :\n                    temp+=1\n            print(temp ,i)\n            if temp > maxi:\n                maxi=temp\n                maxii=i\n                \n        return maxii\n    ","lang":"python"},{"title":"Positions of Large Groups","titleSlug":"positions-of-large-groups","status":"ac","content":"<p>In a string&nbsp;<code>S</code>&nbsp;of lowercase letters, these letters form consecutive groups of the same character.</p>\r\n\r\n<p>For example, a string like <code>S = &quot;abbxxxxzyy&quot;</code> has the groups <code>&quot;a&quot;</code>, <code>&quot;bb&quot;</code>, <code>&quot;xxxx&quot;</code>, <code>&quot;z&quot;</code> and&nbsp;<code>&quot;yy&quot;</code>.</p>\r\n\r\n<p>Call a group <em>large</em> if it has 3 or more characters.&nbsp; We would like the starting and ending positions of every large group.</p>\r\n\r\n<p>The final answer should be in lexicographic order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abbxxxxzzy&quot;\r\n<strong>Output: </strong>[[3,6]]\r\n<strong>Explanation</strong>: <code>&quot;xxxx&quot; is the single </code>large group with starting  3 and ending positions 6.\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abc&quot;\r\n<strong>Output: </strong>[]\r\n<strong>Explanation</strong>: We have &quot;a&quot;,&quot;b&quot; and &quot;c&quot; but no large group.\r\n</pre>\r\n\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>&quot;abcdddeeeeaabbbcd&quot;\r\n<strong>Output: </strong>[[3,5],[6,9],[12,14]]</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:&nbsp;</strong>&nbsp;<code>1 &lt;= S.length &lt;= 1000</code></p>\r\n","code":"class Solution:\n    def largeGroupPositions(self, S: str) -> List[List[int]]:\n        x=[0,S[0],0,1]\n        ret=[]\n        for i,j in enumerate(S):\n            \n            if x[1] != j and x[0] <3:\n                x[3]=i\n                x[2] = x[3]\n                x[0]=1\n                x[1]=j\n                \n            elif x[1] != j and x[0] >=3:\n                \n                x[1]= j\n                ret.append([x[2],x[3]])\n                x[0]=1\n                x[3]=i\n                x[2]=x[3]\n\n            else:\n                x[0]+=1\n                x[3] =i\n        \n        if x[0] >= 3:\n            ret.append([x[2],x[3]])\n        \n        return ret\n            ","lang":"python3"},{"title":"Flipping an Image","titleSlug":"flipping-an-image","status":"ac","content":"<p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.</p>\r\n\r\n<p>To flip an image horizontally means that each row of the image is reversed.&nbsp; For example, flipping&nbsp;<code>[1, 1, 0]</code>&nbsp;horizontally results in&nbsp;<code>[0, 1, 1]</code>.</p>\r\n\r\n<p>To invert an image means&nbsp;that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>.&nbsp;For example, inverting&nbsp;<code>[0, 1, 1]</code>&nbsp;results in&nbsp;<code>[1, 0, 0]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0],[1,0,1],[0,0,0]]\r\n<strong>Output: </strong>[[1,0,0],[0,1,0],[1,1,1]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\r\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\r\n</pre>\r\n\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\r\n<strong>Output: </strong>[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n<strong>Explanation:</strong> First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\r\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n</pre>\r\n\r\n<p><strong>Notes:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>1 &lt;= A.length = A[0].length &lt;= 20</code></li>\r\n\t<li><code>0 &lt;= A[i][j]<font face=\"sans-serif, Arial, Verdana, Trebuchet MS\">&nbsp;&lt;=&nbsp;</font>1</code></li>\r\n</ul>\r\n","code":"class Solution:\n    def flipAndInvertImage(self, A: List[List[int]]) -> List[List[int]]:\n        for i,j in enumerate(A):\n            A[i]=map(lambda x: 1-x , j[::-1])    \n        return A","lang":"python3"},{"title":"Peak Index in a Mountain Array","titleSlug":"peak-index-in-a-mountain-array","status":"ac","content":"<p>Let&#39;s call an array <code>A</code> a <em>mountain</em>&nbsp;if the following properties hold:</p>\r\n\r\n<ul>\r\n\t<li><code>A.length &gt;= 3</code></li>\r\n\t<li>There exists some <code>0 &lt; i&nbsp;&lt; A.length - 1</code> such that <code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\r\n</ul>\r\n\r\n<p>Given an array that is definitely a mountain, return any&nbsp;<code>i</code>&nbsp;such that&nbsp;<code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code>.</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[0,1,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">1</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[0,2,1,0]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">1</span></pre>\r\n</div>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>3 &lt;= A.length &lt;= 10000</code></li>\r\n\t<li><code><font face=\"monospace\">0 &lt;= A[i] &lt;= 10^6</font></code></li>\r\n\t<li>A&nbsp;is a mountain, as defined above.</li>\r\n</ol>\r\n","code":"class Solution:\n    def peakIndexInMountainArray(self, A: List[int]) -> int:\n        for i in enumerate(A):\n            if i[1]>A[i[0]+1]:\n                return i[0]","lang":"python3"},{"title":"Lemonade Change","titleSlug":"lemonade-change","status":"ac","content":"<p>At a lemonade stand, each lemonade costs <code>$5</code>.&nbsp;</p>\r\n\r\n<p>Customers are standing in a queue to buy from you, and order one at a time (in the order specified by <code>bills</code>).</p>\r\n\r\n<p>Each customer will only buy one lemonade and&nbsp;pay with either a <code>$5</code>, <code>$10</code>, or <code>$20</code> bill.&nbsp; You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.</p>\r\n\r\n<p>Note that you don&#39;t have any change&nbsp;in hand at first.</p>\r\n\r\n<p>Return <code>true</code>&nbsp;if and only if you can provide every customer with correct change.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[5,5,5,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n<strong>Explanation: </strong>\r\nFrom the first 3 customers, we collect three $5 bills in order.\r\nFrom the fourth customer, we collect a $10 bill and give back a $5.\r\nFrom the fifth customer, we give a $10 bill and a $5 bill.\r\nSince all customers got correct change, we output true.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[5,5,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[10,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[5,5,10,10,20]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">false</span>\r\n<strong>Explanation: </strong>\r\nFrom the first two customers in order, we collect two $5 bills.\r\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\r\nFor the last customer, we can't give change of $15 back because we only have two $10 bills.\r\nSince not every customer received correct change, the answer is false.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ul>\r\n\t<li><code>0 &lt;= bills.length &lt;= 10000</code></li>\r\n\t<li><code>bills[i]</code>&nbsp;will be either&nbsp;<code>5</code>, <code>10</code>, or <code>20</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        five_dollar=0\n        ten_dollar=0\n        for i in bills:\n            if i ==5:\n                five_dollar+=1\n            elif i==10:\n                five_dollar-=1\n                ten_dollar+=1\n            elif i ==20:\n                if ten_dollar > 0:\n                    ten_dollar-=1\n                    five_dollar -=1\n                else:\n                    five_dollar -=3\n            if five_dollar < 0:\n                return False\n        return True\n        ","lang":"python3"},{"title":"Middle of the Linked List","titleSlug":"middle-of-the-linked-list","status":"ac","content":"<p>Given a non-empty, singly&nbsp;linked list with head node <code>head</code>, return&nbsp;a&nbsp;middle node of linked list.</p>\r\n\r\n<p>If there are two middle nodes, return the second middle node.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,3,4,5]</span>\r\n<strong>Output: </strong>Node 3 from this list (Serialization: <span id=\"example-output-1\">[3,4,5]</span>)\r\nThe returned node has value 3.  (The judge&#39;s serialization of this node is [3,4,5]).\r\nNote that we returned a ListNode object ans, such that:\r\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[1,2,3,4,5,6]</span>\r\n<strong>Output: </strong>Node 4 from this list (Serialization: <span id=\"example-output-2\">[4,5,6]</span>)\r\nSince the list has two middle nodes with values 3 and 4, we return the second one.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ul>\r\n\t<li>The number of nodes in the given list will be between <code>1</code>&nbsp;and <code>100</code>.</li>\r\n</ul>\r\n</div>\r\n</div>\r\n","code":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        leng=0\n        newnode=head\n        while newnode:\n            leng+=1\n            newnode=newnode.next\n        leng=leng//2 \n        while leng !=0:\n            leng-=1\n            head=head.next\n        return head","lang":"python"},{"title":"Monotonic Array","titleSlug":"monotonic-array","status":"ac","content":"<p>An array is <em>monotonic</em> if it is either monotone increasing or monotone decreasing.</p>\r\n\r\n<p>An array <code>A</code> is monotone increasing if for all <code>i &lt;= j</code>, <code>A[i] &lt;= A[j]</code>.&nbsp; An array <code>A</code> is monotone decreasing if for all <code>i &lt;= j</code>, <code>A[i] &gt;= A[j]</code>.</p>\r\n\r\n<p>Return <code>true</code> if and only if the given array <code>A</code> is monotonic.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[1,2,2,3]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[6,5,4,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">[1,3,2]</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">false</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 4:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-4-1\">[1,2,4,5]</span>\r\n<strong>Output: </strong><span id=\"example-output-4\">true</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 5:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-5-1\">[1,1,1]</span>\r\n<strong>Output: </strong><span id=\"example-output-5\">true</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 50000</code></li>\r\n\t<li><code>-100000 &lt;= A[i] &lt;= 100000</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n","code":"class Solution:\n    def isMonotonic(self, A: List[int]) -> bool:\n        less=1\n        big=1\n        for i in range(0,len(A)-1):\n            if A[i]==A[i+1]:\n                pass\n            elif A[i]> A[i+1] and big ==1:\n                less=0\n            elif A[i]<A[i+1] and less==1:\n                big=0\n            else:\n                return False\n        return True\n                ","lang":"python3"},{"title":"Sort Array By Parity","titleSlug":"sort-array-by-parity","status":"ac","content":"<p>Given an array <code>A</code> of non-negative integers, return an array consisting of all the even elements of <code>A</code>, followed by all the odd elements of <code>A</code>.</p>\r\n\r\n<p>You may return any answer array that satisfies this condition.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[3,1,2,4]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[2,4,3,1]</span>\r\nThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= A.length &lt;= 5000</code></li>\r\n\t<li><code>0 &lt;= A[i] &lt;= 5000</code></li>\r\n</ol>\r\n</div>\r\n","code":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArrayByParity(int* A, int ASize, int* returnSize) {\n    int array2[ASize],k=0,m=0,i;\n    int *array1=(int *)calloc(ASize,sizeof(int));\n    for(i=0;i<ASize;i++){\n        if(A[i]%2==0){array1[m]=A[i];\n                     m++;}\n        else{array2[k]=A[i];\n            k++;}\n    }\n    k=0;\n    for(i=m;i<ASize;i++){\n        array1[i]=array2[k];\n        //printf(\"%d \\t\",array1[i]);\n        k++;\n    }\n    \n    *returnSize=ASize;\n    return array1;\n}","lang":"c"},{"title":"Range Sum of BST","titleSlug":"range-sum-of-bst","status":"ac","content":"<p>Given the <code>root</code> node of a binary search tree, return the sum of values of all nodes with value between <code>L</code> and <code>R</code> (inclusive).</p>\r\n\r\n<p>The binary search tree is guaranteed to have unique values.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-1-1\">[10,5,15,3,7,null,18]</span>, L = <span id=\"example-input-1-2\">7</span>, R = <span id=\"example-input-1-3\">15</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">32</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>root = <span id=\"example-input-2-1\">[10,5,15,3,7,13,18,1,null,6]</span>, L = <span id=\"example-input-2-2\">6</span>, R = <span id=\"example-input-2-3\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">23</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li>The number of nodes in the tree is at most <code>10000</code>.</li>\r\n\t<li>The final answer is guaranteed to be less than <code>2^31</code>.</li>\r\n</ol>\r\n</div>\r\n</div>","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def rangeSumBST(self, root, L, R):\n        def dfs(node):\n            if node:\n                if L <= node.val <=R:\n                    self.ans += node.val\n                if L< node.val:\n                    dfs(node.left)\n                if node.val<R:\n                    dfs(node.right)\n        self.ans=0\n        dfs(root)\n        return self.ans","lang":"python3"},{"title":"Valid Mountain Array","titleSlug":"valid-mountain-array","status":"ac","content":"<p>Given an array <code>A</code> of integers, return <code>true</code> if and only if it is a <em>valid mountain array</em>.</p>\n\n<p>Recall that A is a mountain array if and only if:</p>\n\n<ul>\n\t<li><code>A.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with&nbsp;<code>0 &lt; i&nbsp;&lt; A.length - 1</code>&nbsp;such that:\n\t<ul>\n\t\t<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i] </code></li>\n\t\t<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-1-1\">[2,1]</span>\n<strong>Output: </strong><span id=\"example-output-1\">false</span>\n</pre>\n\n<div>\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-2-1\">[3,5,5]</span>\n<strong>Output: </strong><span id=\"example-output-2\">false</span>\n</pre>\n\n<div>\n<p><strong>Example 3:</strong></p>\n\n<pre>\n<strong>Input: </strong><span id=\"example-input-3-1\">[0,3,2,1]</span>\n<strong>Output: </strong><span id=\"example-output-3\">true</span></pre>\n</div>\n</div>\n\n<p>&nbsp;</p>\n\n<p><strong>Note:</strong></p>\n\n<ol>\n\t<li><code>0 &lt;= A.length &lt;= 10000</code></li>\n\t<li><code>0 &lt;= A[i] &lt;= 10000&nbsp;</code></li>\n</ol>\n\n<div>\n<p>&nbsp;</p>\n\n<div>\n<div>&nbsp;</div>\n</div>\n</div>\n","code":"class Solution:\n    def validMountainArray(self, A: List[int]) -> bool:\n        try:\n            m=max(A)\n        except:\n            return False\n        \n        i=0\n        y=len(A)-1\n        x=A.index(m)\n        if x == 0 or x ==y:\n            return False\n        while i < x :\n            if A[i] >= A[i+1]:\n                return False\n            i+=1\n        i =x\n        \n        while i < y:\n            if A[i] <= A[i+1]:\n                return False\n            i+=1\n        return True","lang":"python3"},{"title":"DI String Match","titleSlug":"di-string-match","status":"ac","content":"<p>Given a string <code>S</code> that <strong>only</strong> contains &quot;I&quot; (increase) or &quot;D&quot; (decrease), let <code>N = S.length</code>.</p>\r\n\r\n<p>Return <strong>any</strong> permutation <code>A</code> of <code>[0, 1, ..., N]</code> such that for all <code>i = 0,&nbsp;..., N-1</code>:</p>\r\n\r\n<ul>\r\n\t<li>If <code>S[i] == &quot;I&quot;</code>, then <code>A[i] &lt; A[i+1]</code></li>\r\n\t<li>If <code>S[i] == &quot;D&quot;</code>, then <code>A[i] &gt; A[i+1]</code></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">&quot;IDID&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,4,1,3,2]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">&quot;III&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[0,1,2,3]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">&quot;DDI&quot;</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">[3,2,0,1]</span></pre>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= S.length &lt;= 10000</code></li>\r\n\t<li><code>S</code> only contains characters <code>&quot;I&quot;</code> or <code>&quot;D&quot;</code>.</li>\r\n</ol>","code":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* diStringMatch(char* S, int* returnSize) {\n  // D : max(rest)\n  // I : min(rest)\n  *returnSize = strlen(S) + 1;\n  int *A = (int *)malloc((*returnSize)*sizeof(int));\n  int min = 0;\n  int max = *returnSize - 1;\n  \n  for(int i = 0; i < *returnSize; i++){\n    if(S[i] == 'I'){\n      A[i] = min;\n      min ++;\n    } else {\n      // last number will process in else.\n      A[i] = max;\n      max --;\n    }\n  }\n  return A;\n}","lang":"c"},{"title":"Squares of a Sorted Array","titleSlug":"squares-of-a-sorted-array","status":"ac","content":"<p>Given an array of integers <code>A</code>&nbsp;sorted in non-decreasing order,&nbsp;return an array of the squares of each number,&nbsp;also in sorted non-decreasing order.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">[-4,-1,0,3,10]</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">[0,1,9,16,100]</span>\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">[-7,-3,2,3,11]</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">[4,9,9,49,121]</span>\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><span>Note:</span></strong></p>\r\n\r\n<ol>\r\n\t<li><code><span>1 &lt;= A.length &lt;= 10000</span></code></li>\r\n\t<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>\r\n\t<li><code>A</code>&nbsp;is sorted in non-decreasing order.</li>\r\n</ol>\r\n</div>\r\n</div>","code":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortedSquares(int* A, int ASize, int* returnSize) {\n    int i,c,d,swap;\n     int *array1=(int *)calloc(ASize,sizeof(int));\n    for(i=0;i<ASize;i++){\n        A[i]=A[i]*A[i];\n        //printf(\"%d \\t\",A[i] );\n    }\n    for (c = 0 ; c < ASize; c++)\n  {\n    for (d = c+1 ; d < ASize ; d++)\n    {\n      if (A[c] > A[d]) /* For decreasing order use < */\n      {\n        swap       = A[d];\n        A[d]   = A[c];\n        A[c] = swap;\n      }\n    }   array1[c]= A[c];\n        printf(\"%d \\n\",array1[c]);\n  }\n    *returnSize=ASize;\n    return array1;\n}\n","lang":"c"},{"title":"Complement of Base 10 Integer","titleSlug":"complement-of-base-10-integer","status":"ac","content":"<p>Every non-negative integer <code>N</code>&nbsp;has a binary representation.&nbsp; For example,&nbsp;<code>5</code> can be represented as <code>&quot;101&quot;</code>&nbsp;in binary, <code>11</code> as <code>&quot;1011&quot;</code>&nbsp;in binary, and so on.&nbsp; Note that except for <code>N = 0</code>, there are no leading zeroes in any&nbsp;binary representation.</p>\r\n\r\n<p>The <em>complement</em>&nbsp;of a binary representation&nbsp;is the number in binary you get when changing every <code>1</code> to a <code>0</code> and <code>0</code> to a <code>1</code>.&nbsp; For example, the complement of <code>&quot;101&quot;</code> in binary is <code>&quot;010&quot;</code> in binary.</p>\r\n\r\n<p>For a given number <code>N</code> in base-10, return the complement of it&#39;s binary representation as a&nbsp;base-10 integer.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<div>\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-1-1\">5</span>\r\n<strong>Output: </strong><span id=\"example-output-1\">2</span>\r\n<strong>Explanation: </strong>5 is &quot;101&quot; in binary, with complement &quot;010&quot; in binary, which is 2 in base-10.\r\n</pre>\r\n\r\n<div>\r\n<p><strong>Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-2-1\">7</span>\r\n<strong>Output: </strong><span id=\"example-output-2\">0</span>\r\n<span id=\"example-output-1\"><strong>Explanation: </strong>7 is &quot;111&quot; in binary, with complement &quot;000&quot; in binary, which is 0 in base-10.\r\n</span></pre>\r\n\r\n<div>\r\n<p><strong>Example 3:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong><span id=\"example-input-3-1\">10</span>\r\n<strong>Output: </strong><span id=\"example-output-3\">5</span>\r\n<strong>Explanation: </strong>10 is &quot;1010&quot; in binary, with complement &quot;0101&quot; in binary, which is 5 in base-10.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>0 &lt;= N &lt; 10^9</code></li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>","code":"class Solution(object):\n    def bitwiseComplement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        N= \"{0:b}\".format(N)\n        x=pow(2,len(N)-1)\n        #print(x)\n        sumo=0\n        for i in N:\n            if i=='0':\n                sumo+=x*1\n            x=x/2\n        return sumo","lang":"python"},{"title":"Last Stone Weight","titleSlug":"last-stone-weight","status":"ac","content":"<p>We have a collection of rocks, each rock has a positive integer weight.</p>\r\n\r\n<p>Each turn, we choose the two <strong>heaviest</strong>&nbsp;rocks&nbsp;and smash them together.&nbsp; Suppose the stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>.&nbsp; The result of this smash is:</p>\r\n\r\n<ul>\r\n\t<li>If <code>x == y</code>, both stones are totally destroyed;</li>\r\n\t<li>If <code>x != y</code>, the stone of weight <code>x</code> is totally destroyed, and the stone of weight <code>y</code> has new weight <code>y-x</code>.</li>\r\n</ul>\r\n\r\n<p>At the end, there is at most 1 stone left.&nbsp; Return the weight of this stone (or 0 if there are no stones left.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input: </strong>[2,7,4,1,8,1]\r\n<strong>Output: </strong>1\r\n<strong>Explanation: </strong>\r\nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\r\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\r\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\r\nwe combine 1 and 1 to get 0 so the array converts to [1] then that&#39;s the value of last stone.</pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Note:</strong></p>\r\n\r\n<ol>\r\n\t<li><code>1 &lt;= stones.length &lt;= 30</code></li>\r\n\t<li><code>1 &lt;= stones[i] &lt;= 1000</code></li>\r\n</ol>","code":"class Solution(object):\n    def lastStoneWeight(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: int\n        \"\"\"\n        def fun(stones):\n            if len(stones) >1:\n                x=stones.pop(stones.index(max(stones)))\n                y=stones.pop(stones.index(max(stones)))\n                if x==y:\n                    stones = fun(stones)\n            \n            \n                else:\n                    stones.append(abs(y-x))\n                    stones = fun(stones)\n        \n            return stones if len(stones) >0 else [0]\n            \n            \n            \n        return fun(stones).pop()","lang":"python"},{"title":"Distribute Candies to People","titleSlug":"distribute-candies-to-people","status":"ac","content":"<p>We distribute some&nbsp;number of <code>candies</code>, to a row of <strong><code>n =&nbsp;num_people</code></strong>&nbsp;people in the following way:</p>\n\n<p>We then give 1 candy to the first person, 2 candies to the second person, and so on until we give <code>n</code>&nbsp;candies to the last person.</p>\n\n<p>Then, we go back to the start of the row, giving <code>n&nbsp;+ 1</code> candies to the first person, <code>n&nbsp;+ 2</code> candies to the second person, and so on until we give <code>2 * n</code>&nbsp;candies to the last person.</p>\n\n<p>This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.&nbsp; The last person will receive all of our remaining candies (not necessarily one more than the previous gift).</p>\n\n<p>Return an array (of length <code>num_people</code>&nbsp;and sum <code>candies</code>) that represents the final distribution of candies.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = 7, num_people = 4\n<strong>Output:</strong> [1,2,3,1]\n<strong>Explanation:</strong>\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> candies = 10, num_people = 3\n<strong>Output:</strong> [5,2,3]\n<strong>Explanation: </strong>\nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li>1 &lt;= candies &lt;= 10^9</li>\n\t<li>1 &lt;= num_people &lt;= 1000</li>\n</ul>\n","code":"class Solution:\n    def distributeCandies(self, candies: int, num_people: int) -> List[int]:\n        l=[0]*num_people\n        x=0\n        n=1\n        while candies:\n            if x < num_people:\n                if n <= candies:\n                    l[x] = l[x]+n\n                    candies -=n\n                    x+=1\n                    n+=1\n                else:\n                    l[x]+=candies\n                    x+=1\n                    candies=0\n            else:\n                x=0\n            #print(l,n)\n        return l","lang":"python3"},{"title":"Defanging an IP Address","titleSlug":"defanging-an-ip-address","status":"ac","content":"<p>Given a valid (IPv4) IP <code>address</code>, return a defanged version of that IP address.</p>\r\n\r\n<p>A <em>defanged&nbsp;IP address</em>&nbsp;replaces every period <code>&quot;.&quot;</code> with <code>&quot;[.]&quot;</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Example 1:</strong></p>\r\n<pre><strong>Input:</strong> address = \"1.1.1.1\"\r\n<strong>Output:</strong> \"1[.]1[.]1[.]1\"\r\n</pre><p><strong>Example 2:</strong></p>\r\n<pre><strong>Input:</strong> address = \"255.100.50.0\"\r\n<strong>Output:</strong> \"255[.]100[.]50[.]0\"\r\n</pre>\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li>The given <code>address</code> is a valid IPv4 address.</li>\r\n</ul>","code":"class Solution(object):\n    def defangIPaddr(self, address):\n        \"\"\"\n        :type address: str\n        :rtype: str\n        \"\"\"\n        #address=address.replace(\".\",\"[.]\")\n        return address.replace(\".\",\"[.]\")\n            ","lang":"python"}]